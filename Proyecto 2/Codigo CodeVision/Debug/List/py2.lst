
AVRASM ver. 2.1.30  C:\Users\braya\Downloads\Introduccion a los microcontroladores\Proyecto 2 solo sin boton pausa\Codigo CodeVision\Debug\List\py2.asm Wed Jun 07 21:29:43 2023

C:\Users\braya\Downloads\Introduccion a los microcontroladores\Proyecto 2 solo sin boton pausa\Codigo CodeVision\Debug\List\py2.asm(1415): warning: Register r4 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Proyecto 2 solo sin boton pausa\Codigo CodeVision\Debug\List\py2.asm(1416): warning: Register r5 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Proyecto 2 solo sin boton pausa\Codigo CodeVision\Debug\List\py2.asm(1417): warning: Register r6 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Proyecto 2 solo sin boton pausa\Codigo CodeVision\Debug\List\py2.asm(1418): warning: Register r7 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Proyecto 2 solo sin boton pausa\Codigo CodeVision\Debug\List\py2.asm(1419): warning: Register r8 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Proyecto 2 solo sin boton pausa\Codigo CodeVision\Debug\List\py2.asm(1420): warning: Register r9 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Proyecto 2 solo sin boton pausa\Codigo CodeVision\Debug\List\py2.asm(1421): warning: Register r10 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Proyecto 2 solo sin boton pausa\Codigo CodeVision\Debug\List\py2.asm(1422): warning: Register r11 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Proyecto 2 solo sin boton pausa\Codigo CodeVision\Debug\List\py2.asm(1423): warning: Register r12 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Proyecto 2 solo sin boton pausa\Codigo CodeVision\Debug\List\py2.asm(1424): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.51 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8535
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x20
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _control=R4
                 	.DEF _control_msb=R5
                 	.DEF _control2=R6
                 	.DEF _control2_msb=R7
                 	.DEF _control3=R8
                 	.DEF _control3_msb=R9
                 	.DEF _i=R10
                 	.DEF _i_msb=R11
                 	.DEF _control4=R12
                 	.DEF _control4_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c021      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000015 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000016 0000
000017 0000      	.DB  0x0,0x0,0x0,0x0
000018 0000
000019 0000      	.DB  0x0,0x0,0x0,0x0
00001a 0000      	.DB  0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
00001b 0002      	.DW  0x02
00001c 0002      	.DW  0x02
00001d 002a      	.DW  __REG_BIT_VARS*2
                 
00001e 000a      	.DW  0x0A
00001f 0004      	.DW  0x04
000020 002c      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000021 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000022 94f8      	CLI
000023 27ee      	CLR  R30
000024 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000025 e0f1      	LDI  R31,1
000026 bffb      	OUT  GICR,R31
000027 bfeb      	OUT  GICR,R30
000028 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000029 e08d      	LDI  R24,(14-2)+1
00002a e0a2      	LDI  R26,2
00002b 27bb      	CLR  R27
                 __CLEAR_REG:
00002c 93ed      	ST   X+,R30
00002d 958a      	DEC  R24
00002e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00002f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000030 e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000031 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000032 93ed      	ST   X+,R30
000033 9701      	SBIW R24,1
000034 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000035 e3e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000036 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000037 9185      	LPM  R24,Z+
000038 9195      	LPM  R25,Z+
000039 9700      	SBIW R24,0
00003a f061      	BREQ __GLOBAL_INI_END
00003b 91a5      	LPM  R26,Z+
00003c 91b5      	LPM  R27,Z+
00003d 9005      	LPM  R0,Z+
00003e 9015      	LPM  R1,Z+
00003f 01bf      	MOVW R22,R30
000040 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000041 9005      	LPM  R0,Z+
000042 920d      	ST   X+,R0
000043 9701      	SBIW R24,1
000044 f7e1      	BRNE __GLOBAL_INI_LOOP
000045 01fb      	MOVW R30,R22
000046 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000047 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000048 bfed      	OUT  SPL,R30
000049 e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004b eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004c e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004d c041      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void mover(int movimientos[], int j){
                 ; 0000 0038 void mover(int movimientos[], int j){
                 
                 	.CSEG
                 _mover:
                 ; .FSTART _mover
                 ; 0000 0039 for(i=0; i<=j; i++){
00004e d183      	RCALL __SAVELOCR4
00004f 018d      	MOVW R16,R26
                +
000050 812c     +LDD R18 , Y + 4
000051 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
                 ;	movimientos -> R18,R19
                 ;	j -> R16,R17
000052 24aa      	CLR  R10
000053 24bb      	CLR  R11
                 _0x4:
                +
000054 150a     +CP R16 , R10
000055 051b     +CPC R17 , R11
                 	__CPWRR 16,17,10,11
000056 f19c      	BRLT _0x5
                 ; 0000 003A //Muestra los movivimientos en los motores
                 ; 0000 003B if (movimientos[i]==0){
000057 d146      	RCALL SUBOPT_0x0
                +
000058 91ed     +LD R30 , X +
000059 91fc     +LD R31 , X
00005a 9711     +SBIW R26 , 1
                 	__GETW1P
00005b 9730      	SBIW R30,0
00005c f121      	BREQ _0x59
                 ; 0000 003C PORTA=0x00;
                 ; 0000 003D delay_ms(100);
                 ; 0000 003E } else if(movimientos[i]==1){  //Adelante
00005d d140      	RCALL SUBOPT_0x0
00005e d146      	RCALL SUBOPT_0x1
00005f 30e1      	CPI  R30,LOW(0x1)
000060 e0a0      	LDI  R26,HIGH(0x1)
000061 07fa      	CPC  R31,R26
000062 f419      	BRNE _0x8
                 ; 0000 003F PORTA=0x05;
000063 e0e5      	LDI  R30,LOW(5)
000064 d143      	RCALL SUBOPT_0x2
                 ; 0000 0040 delay_ms(2000);
000065 c01f      	RJMP _0x5A
                 ; 0000 0041 } else if(movimientos[i]==2){   //Atras
                 _0x8:
000066 d137      	RCALL SUBOPT_0x0
000067 d13d      	RCALL SUBOPT_0x1
000068 30e2      	CPI  R30,LOW(0x2)
000069 e0a0      	LDI  R26,HIGH(0x2)
00006a 07fa      	CPC  R31,R26
00006b f419      	BRNE _0xA
                 ; 0000 0042 PORTA=0x0A;
00006c e0ea      	LDI  R30,LOW(10)
00006d d13a      	RCALL SUBOPT_0x2
                 ; 0000 0043 delay_ms(2000);
00006e c016      	RJMP _0x5A
                 ; 0000 0044 } else if(movimientos[i]==3){   //A la derecha
                 _0xA:
00006f d12e      	RCALL SUBOPT_0x0
000070 d134      	RCALL SUBOPT_0x1
000071 30e3      	CPI  R30,LOW(0x3)
000072 e0a0      	LDI  R26,HIGH(0x3)
000073 07fa      	CPC  R31,R26
000074 f419      	BRNE _0xC
                 ; 0000 0045 PORTA=0x08;
000075 e0e8      	LDI  R30,LOW(8)
000076 d131      	RCALL SUBOPT_0x2
                 ; 0000 0046 delay_ms(2000);
000077 c00d      	RJMP _0x5A
                 ; 0000 0047 } else if(movimientos[i]==4){   //A la izquierda
                 _0xC:
000078 d125      	RCALL SUBOPT_0x0
000079 d12b      	RCALL SUBOPT_0x1
00007a 30e4      	CPI  R30,LOW(0x4)
00007b e0a0      	LDI  R26,HIGH(0x4)
00007c 07fa      	CPC  R31,R26
00007d f419      	BRNE _0xE
                 ; 0000 0048 PORTA=0x02;
00007e e0e2      	LDI  R30,LOW(2)
00007f d128      	RCALL SUBOPT_0x2
                 ; 0000 0049 delay_ms(2000);
000080 c004      	RJMP _0x5A
                 ; 0000 004A } else {
                 _0xE:
                 ; 0000 004B PORTA=0x00;
                 _0x59:
000081 e0e0      	LDI  R30,LOW(0)
000082 bbeb      	OUT  0x1B,R30
                 ; 0000 004C delay_ms(100);
000083 e6a4      	LDI  R26,LOW(100)
000084 e0b0      	LDI  R27,0
                 _0x5A:
000085 d156      	RCALL _delay_ms
                 ; 0000 004D }
                 ; 0000 004E 
                 ; 0000 004F }
000086 01f5      	MOVW R30,R10
000087 9631      	ADIW R30,1
000088 015f      	MOVW R10,R30
000089 cfca      	RJMP _0x4
                 _0x5:
                 ; 0000 0050 PORTA=0x00;
00008a e0e0      	LDI  R30,LOW(0)
00008b bbeb      	OUT  0x1B,R30
                 ; 0000 0051 }
00008c d14a      	RCALL __LOADLOCR4
00008d 9626      	ADIW R28,6
00008e 9508      	RET
                 ; .FEND
                 ;void main(void)
                 ; 0000 0055 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0056 // Declare your local variables here
                 ; 0000 0057 
                 ; 0000 0058 // Input/Output Ports initialization
                 ; 0000 0059 // Port A initialization
                 ; 0000 005A // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 005B DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
00008f efef      	LDI  R30,LOW(255)
000090 bbea      	OUT  0x1A,R30
                 ; 0000 005C // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 005D PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000091 e0e0      	LDI  R30,LOW(0)
000092 bbeb      	OUT  0x1B,R30
                 ; 0000 005E 
                 ; 0000 005F // Port B initialization
                 ; 0000 0060 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0061 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000093 bbe7      	OUT  0x17,R30
                 ; 0000 0062 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0063 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000094 bbe8      	OUT  0x18,R30
                 ; 0000 0064 
                 ; 0000 0065 // Port C initialization
                 ; 0000 0066 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0067 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000095 bbe4      	OUT  0x14,R30
                 ; 0000 0068 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0069 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000096 bbe5      	OUT  0x15,R30
                 ; 0000 006A 
                 ; 0000 006B // Port D initialization
                 ; 0000 006C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 006D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000097 bbe1      	OUT  0x11,R30
                 ; 0000 006E // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 006F PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
000098 efef      	LDI  R30,LOW(255)
000099 bbe2      	OUT  0x12,R30
                 ; 0000 0070 
                 ; 0000 0071 // Timer/Counter 0 initialization
                 ; 0000 0072 // Clock source: System Clock
                 ; 0000 0073 // Clock value: Timer 0 Stopped
                 ; 0000 0074 // Mode: Normal top=0xFF
                 ; 0000 0075 // OC0 output: Disconnected
                 ; 0000 0076 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00009a e0e0      	LDI  R30,LOW(0)
00009b bfe3      	OUT  0x33,R30
                 ; 0000 0077 TCNT0=0x00;
00009c bfe2      	OUT  0x32,R30
                 ; 0000 0078 OCR0=0x00;
00009d bfec      	OUT  0x3C,R30
                 ; 0000 0079 
                 ; 0000 007A // Timer/Counter 1 initialization
                 ; 0000 007B // Clock source: System Clock
                 ; 0000 007C // Clock value: Timer1 Stopped
                 ; 0000 007D // Mode: Normal top=0xFFFF
                 ; 0000 007E // OC1A output: Disconnected
                 ; 0000 007F // OC1B output: Disconnected
                 ; 0000 0080 // Noise Canceler: Off
                 ; 0000 0081 // Input Capture on Falling Edge
                 ; 0000 0082 // Timer1 Overflow Interrupt: Off
                 ; 0000 0083 // Input Capture Interrupt: Off
                 ; 0000 0084 // Compare A Match Interrupt: Off
                 ; 0000 0085 // Compare B Match Interrupt: Off
                 ; 0000 0086 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00009e bdef      	OUT  0x2F,R30
                 ; 0000 0087 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00009f bdee      	OUT  0x2E,R30
                 ; 0000 0088 TCNT1H=0x00;
0000a0 bded      	OUT  0x2D,R30
                 ; 0000 0089 TCNT1L=0x00;
0000a1 bdec      	OUT  0x2C,R30
                 ; 0000 008A ICR1H=0x00;
0000a2 bde7      	OUT  0x27,R30
                 ; 0000 008B ICR1L=0x00;
0000a3 bde6      	OUT  0x26,R30
                 ; 0000 008C OCR1AH=0x00;
0000a4 bdeb      	OUT  0x2B,R30
                 ; 0000 008D OCR1AL=0x00;
0000a5 bdea      	OUT  0x2A,R30
                 ; 0000 008E OCR1BH=0x00;
0000a6 bde9      	OUT  0x29,R30
                 ; 0000 008F OCR1BL=0x00;
0000a7 bde8      	OUT  0x28,R30
                 ; 0000 0090 
                 ; 0000 0091 // Timer/Counter 2 initialization
                 ; 0000 0092 // Clock source: System Clock
                 ; 0000 0093 // Clock value: Timer2 Stopped
                 ; 0000 0094 // Mode: Normal top=0xFF
                 ; 0000 0095 // OC2 output: Disconnected
                 ; 0000 0096 ASSR=0<<AS2;
0000a8 bde2      	OUT  0x22,R30
                 ; 0000 0097 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000a9 bde5      	OUT  0x25,R30
                 ; 0000 0098 TCNT2=0x00;
0000aa bde4      	OUT  0x24,R30
                 ; 0000 0099 OCR2=0x00;
0000ab bde3      	OUT  0x23,R30
                 ; 0000 009A 
                 ; 0000 009B // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 009C TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000ac bfe9      	OUT  0x39,R30
                 ; 0000 009D 
                 ; 0000 009E // External Interrupt(s) initialization
                 ; 0000 009F // INT0: Off
                 ; 0000 00A0 // INT1: Off
                 ; 0000 00A1 // INT2: Off
                 ; 0000 00A2 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000ad bfe5      	OUT  0x35,R30
                 ; 0000 00A3 MCUCSR=(0<<ISC2);
0000ae bfe4      	OUT  0x34,R30
                 ; 0000 00A4 
                 ; 0000 00A5 // USART initialization
                 ; 0000 00A6 // USART disabled
                 ; 0000 00A7 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000af b9ea      	OUT  0xA,R30
                 ; 0000 00A8 
                 ; 0000 00A9 // Analog Comparator initialization
                 ; 0000 00AA // Analog Comparator: Off
                 ; 0000 00AB // The Analog Comparator's positive input is
                 ; 0000 00AC // connected to the AIN0 pin
                 ; 0000 00AD // The Analog Comparator's negative input is
                 ; 0000 00AE // connected to the AIN1 pin
                 ; 0000 00AF ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000b0 e8e0      	LDI  R30,LOW(128)
0000b1 b9e8      	OUT  0x8,R30
                 ; 0000 00B0 SFIOR=(0<<ACME);
0000b2 e0e0      	LDI  R30,LOW(0)
0000b3 bfe0      	OUT  0x30,R30
                 ; 0000 00B1 
                 ; 0000 00B2 // ADC initialization
                 ; 0000 00B3 // ADC disabled
                 ; 0000 00B4 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000b4 b9e6      	OUT  0x6,R30
                 ; 0000 00B5 
                 ; 0000 00B6 // SPI initialization
                 ; 0000 00B7 // SPI disabled
                 ; 0000 00B8 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000b5 b9ed      	OUT  0xD,R30
                 ; 0000 00B9 
                 ; 0000 00BA // TWI initialization
                 ; 0000 00BB // TWI disabled
                 ; 0000 00BC TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000b6 bfe6      	OUT  0x36,R30
                 ; 0000 00BD 
                 ; 0000 00BE while (1)
                 _0x10:
                 ; 0000 00BF {
                 ; 0000 00C0 
                 ; 0000 00C1 //Detecta si se presiono el BOTON GO
                 ; 0000 00C2 if (boton4==0)
0000b7 9984      	SBIC 0x10,4
0000b8 c002      	RJMP _0x13
                 ; 0000 00C3 botone=0;
0000b9 94e8      	CLT
0000ba c001      	RJMP _0x5B
                 ; 0000 00C4 else
                 _0x13:
                 ; 0000 00C5 botone=1;
0000bb 9468      	SET
                 _0x5B:
0000bc f833      	BLD  R3,3
                 ; 0000 00C6 
                 ; 0000 00C7 if ((botonp4==1)&&(botone==0)) {//hubo cambio de flanco de 1 a 0
0000bd fe24      	SBRS R2,4
0000be c002      	RJMP _0x16
0000bf fe33      	SBRS R3,3
0000c0 c001      	RJMP _0x17
                 _0x16:
0000c1 c002      	RJMP _0x15
                 _0x17:
                 ; 0000 00C8 //El boton GO esta activo por lo tanto el control = 3 para recorrer el arreglo
                 ; 0000 00C9 control=2;
0000c2 d0e9      	RCALL SUBOPT_0x3
0000c3 d0eb      	RCALL SUBOPT_0x4
                 ; 0000 00CA delay_ms(30);
                 ; 0000 00CB }
                 ; 0000 00CC 
                 ; 0000 00CD if ((botonp4==0)&&(botone==1)) //hubo cambio de flanco de 0 a 1
                 _0x15:
0000c4 fc24      	SBRC R2,4
0000c5 c002      	RJMP _0x19
0000c6 fc33      	SBRC R3,3
0000c7 c001      	RJMP _0x1A
                 _0x19:
0000c8 c001      	RJMP _0x18
                 _0x1A:
                 ; 0000 00CE delay_ms(30);
0000c9 d0e9      	RCALL SUBOPT_0x5
                 ; 0000 00CF botonp4=botone;
                 _0x18:
0000ca fa33      	BST  R3,3
0000cb f824      	BLD  R2,4
                 ; 0000 00D0 
                 ; 0000 00D1 //-----------Se dejo de presionar el boton GO
                 ; 0000 00D2 
                 ; 0000 00D3 //Detecta si se presiono el BOTON CLEAR
                 ; 0000 00D4 if (boton5==0)
0000cc 9985      	SBIC 0x10,5
0000cd c002      	RJMP _0x1B
                 ; 0000 00D5 botonf=0;
0000ce 94e8      	CLT
0000cf c001      	RJMP _0x5C
                 ; 0000 00D6 else
                 _0x1B:
                 ; 0000 00D7 botonf=1;
0000d0 9468      	SET
                 _0x5C:
0000d1 f834      	BLD  R3,4
                 ; 0000 00D8 
                 ; 0000 00D9 if ((botonp5==1)&&(botonf==0)){//hubo cambio de flanco de 1 a 0
0000d2 fe25      	SBRS R2,5
0000d3 c002      	RJMP _0x1E
0000d4 fe34      	SBRS R3,4
0000d5 c001      	RJMP _0x1F
                 _0x1E:
0000d6 c002      	RJMP _0x1D
                 _0x1F:
                 ; 0000 00DA control=1;
0000d7 d0de      	RCALL SUBOPT_0x6
0000d8 d0d6      	RCALL SUBOPT_0x4
                 ; 0000 00DB delay_ms(30);
                 ; 0000 00DC }
                 ; 0000 00DD 
                 ; 0000 00DE if ((botonp5==0)&&(botonf==1)) //hubo cambio de flanco de 0 a 1
                 _0x1D:
0000d9 fc25      	SBRC R2,5
0000da c002      	RJMP _0x21
0000db fc34      	SBRC R3,4
0000dc c001      	RJMP _0x22
                 _0x21:
0000dd c001      	RJMP _0x20
                 _0x22:
                 ; 0000 00DF delay_ms(30);
0000de d0d4      	RCALL SUBOPT_0x5
                 ; 0000 00E0 botonp5=botonf;
                 _0x20:
0000df fa34      	BST  R3,4
0000e0 f825      	BLD  R2,5
                 ; 0000 00E1 //-----------Se dejo de presionar el boton GO
                 ; 0000 00E2 
                 ; 0000 00E3 
                 ; 0000 00E4 
                 ; 0000 00E5 //Pregunta que boton se presiono GO o CLEAR por defecto no se presiona nada y guarda movimientos
                 ; 0000 00E6 if(control==0) {//Por defecto se inicia un ciclo para guardar los movimientos
0000e1 2c04      	MOV  R0,R4
0000e2 2805      	OR   R0,R5
0000e3 f009      	BREQ PC+2
0000e4 c088      	RJMP _0x23
                 ; 0000 00E7 // Ejecutamos un while mientras que los movimientos no superan los 10 y los guardamos en el arreglo
                 ; 0000 00E8 while(control2<1){
                 _0x24:
0000e5 d0d0      	RCALL SUBOPT_0x6
0000e6 166e      	CP   R6,R30
0000e7 067f      	CPC  R7,R31
0000e8 f00c      	BRLT PC+2
0000e9 c080      	RJMP _0x26
                 ; 0000 00E9 //Detecta si se presiono el boton ADELANTE
                 ; 0000 00EA if (boton==0)
0000ea 9980      	SBIC 0x10,0
0000eb c002      	RJMP _0x27
                 ; 0000 00EB botona=0;
0000ec 94e8      	CLT
0000ed c001      	RJMP _0x5D
                 ; 0000 00EC else
                 _0x27:
                 ; 0000 00ED botona=1;
0000ee 9468      	SET
                 _0x5D:
0000ef f827      	BLD  R2,7
                 ; 0000 00EE 
                 ; 0000 00EF if ((botonp==1)&&(botona==0)) { //hubo cambio de flanco de 1 a 0
0000f0 fe20      	SBRS R2,0
0000f1 c002      	RJMP _0x2A
0000f2 fe27      	SBRS R2,7
0000f3 c001      	RJMP _0x2B
                 _0x2A:
0000f4 c003      	RJMP _0x29
                 _0x2B:
                 ; 0000 00F0 //Guarda el movimiento
                 ; 0000 00F1 movimientos[posicion] = 1;
0000f5 d0c3      	RCALL SUBOPT_0x7
0000f6 d0bf      	RCALL SUBOPT_0x6
0000f7 d0cc      	RCALL SUBOPT_0x8
                 ; 0000 00F2 posicion++;
                 ; 0000 00F3 delay_ms(30);
                 ; 0000 00F4 }
                 ; 0000 00F5 
                 ; 0000 00F6 if ((botonp==0)&&(botona==1)) //hubo cambio de flanco de 0 a 1
                 _0x29:
0000f8 fc20      	SBRC R2,0
0000f9 c002      	RJMP _0x2D
0000fa fc27      	SBRC R2,7
0000fb c001      	RJMP _0x2E
                 _0x2D:
0000fc c001      	RJMP _0x2C
                 _0x2E:
                 ; 0000 00F7 delay_ms(30);
0000fd d0b5      	RCALL SUBOPT_0x5
                 ; 0000 00F8 botonp=botona;
                 _0x2C:
0000fe fa27      	BST  R2,7
0000ff f820      	BLD  R2,0
                 ; 0000 00F9 //-----------Se dejo de presionar el boton ADELANTE
                 ; 0000 00FA 
                 ; 0000 00FB //Detecta si se presiono el boton ATRAS
                 ; 0000 00FC if (boton1==0)
000100 9981      	SBIC 0x10,1
000101 c002      	RJMP _0x2F
                 ; 0000 00FD botonb=0;
000102 94e8      	CLT
000103 c001      	RJMP _0x5E
                 ; 0000 00FE else
                 _0x2F:
                 ; 0000 00FF botonb=1;
000104 9468      	SET
                 _0x5E:
000105 f830      	BLD  R3,0
                 ; 0000 0100 
                 ; 0000 0101 if ((botonp1==1)&&(botonb==0)) { //hubo cambio de flanco de 1 a 0
000106 fe21      	SBRS R2,1
000107 c002      	RJMP _0x32
000108 fe30      	SBRS R3,0
000109 c001      	RJMP _0x33
                 _0x32:
00010a c003      	RJMP _0x31
                 _0x33:
                 ; 0000 0102 //Guarda el movimiento
                 ; 0000 0103 movimientos[posicion] = 2;
00010b d0ad      	RCALL SUBOPT_0x7
00010c d09f      	RCALL SUBOPT_0x3
00010d d0b6      	RCALL SUBOPT_0x8
                 ; 0000 0104 posicion++;
                 ; 0000 0105 delay_ms(30);
                 ; 0000 0106 }
                 ; 0000 0107 
                 ; 0000 0108 if ((botonp1==0)&&(botonb==1)) //hubo cambio de flanco de 0 a 1
                 _0x31:
00010e fc21      	SBRC R2,1
00010f c002      	RJMP _0x35
000110 fc30      	SBRC R3,0
000111 c001      	RJMP _0x36
                 _0x35:
000112 c001      	RJMP _0x34
                 _0x36:
                 ; 0000 0109 delay_ms(30);
000113 d09f      	RCALL SUBOPT_0x5
                 ; 0000 010A botonp1=botonb;
                 _0x34:
000114 fa30      	BST  R3,0
000115 f821      	BLD  R2,1
                 ; 0000 010B //-----------Se dejo de presionar el boton ATRAS
                 ; 0000 010C 
                 ; 0000 010D //Detecta si se presiono el boton DERECHA
                 ; 0000 010E if (boton2==0)
000116 9982      	SBIC 0x10,2
000117 c002      	RJMP _0x37
                 ; 0000 010F botonc=0;
000118 94e8      	CLT
000119 c001      	RJMP _0x5F
                 ; 0000 0110 else
                 _0x37:
                 ; 0000 0111 botonc=1;
00011a 9468      	SET
                 _0x5F:
00011b f831      	BLD  R3,1
                 ; 0000 0112 
                 ; 0000 0113 if ((botonp2==1)&&(botonc==0)) { //hubo cambio de flanco de 1 a 0
00011c fe22      	SBRS R2,2
00011d c002      	RJMP _0x3A
00011e fe31      	SBRS R3,1
00011f c001      	RJMP _0x3B
                 _0x3A:
000120 c004      	RJMP _0x39
                 _0x3B:
                 ; 0000 0114 movimientos[posicion]=3;
000121 d097      	RCALL SUBOPT_0x7
000122 e0e3      	LDI  R30,LOW(3)
000123 e0f0      	LDI  R31,HIGH(3)
000124 d09f      	RCALL SUBOPT_0x8
                 ; 0000 0115 posicion++;
                 ; 0000 0116 delay_ms(30);
                 ; 0000 0117 }
                 ; 0000 0118 
                 ; 0000 0119 if ((botonp2==0)&&(botonc==1)) //hubo cambio de flanco de 0 a 1
                 _0x39:
000125 fc22      	SBRC R2,2
000126 c002      	RJMP _0x3D
000127 fc31      	SBRC R3,1
000128 c001      	RJMP _0x3E
                 _0x3D:
000129 c001      	RJMP _0x3C
                 _0x3E:
                 ; 0000 011A delay_ms(30);
00012a d088      	RCALL SUBOPT_0x5
                 ; 0000 011B botonp2=botonc;
                 _0x3C:
00012b fa31      	BST  R3,1
00012c f822      	BLD  R2,2
                 ; 0000 011C 
                 ; 0000 011D //-----------Se dejo de presionar el boton DERECHA
                 ; 0000 011E 
                 ; 0000 011F //Detecta si se presiono el boton IZQUIERDA
                 ; 0000 0120 if (boton3==0)
00012d 9983      	SBIC 0x10,3
00012e c002      	RJMP _0x3F
                 ; 0000 0121 botond=0;
00012f 94e8      	CLT
000130 c001      	RJMP _0x60
                 ; 0000 0122 else
                 _0x3F:
                 ; 0000 0123 botond=1;
000131 9468      	SET
                 _0x60:
000132 f832      	BLD  R3,2
                 ; 0000 0124 
                 ; 0000 0125 if ((botonp3==1)&&(botond==0)) { //hubo cambio de flanco de 1 a 0
000133 fe23      	SBRS R2,3
000134 c002      	RJMP _0x42
000135 fe32      	SBRS R3,2
000136 c001      	RJMP _0x43
                 _0x42:
000137 c004      	RJMP _0x41
                 _0x43:
                 ; 0000 0126 movimientos[posicion]=4;
000138 d080      	RCALL SUBOPT_0x7
000139 e0e4      	LDI  R30,LOW(4)
00013a e0f0      	LDI  R31,HIGH(4)
00013b d088      	RCALL SUBOPT_0x8
                 ; 0000 0127 posicion++;
                 ; 0000 0128 delay_ms(30);
                 ; 0000 0129 }
                 ; 0000 012A 
                 ; 0000 012B if ((botonp3==0)&&(botond==1)) //hubo cambio de flanco de 0 a 1
                 _0x41:
00013c fc23      	SBRC R2,3
00013d c002      	RJMP _0x45
00013e fc32      	SBRC R3,2
00013f c001      	RJMP _0x46
                 _0x45:
000140 c001      	RJMP _0x44
                 _0x46:
                 ; 0000 012C delay_ms(30);
000141 d071      	RCALL SUBOPT_0x5
                 ; 0000 012D botonp3=botond;
                 _0x44:
000142 fa32      	BST  R3,2
000143 f823      	BLD  R2,3
                 ; 0000 012E 
                 ; 0000 012F //-----------Se dejo de presionar el boton IZQUIERDA
                 ; 0000 0130 
                 ; 0000 0131 //Preguntamos si ya se guardaron los 10 movimientos
                 ; 0000 0132 if(posicion == 9){
000144 d088      	RCALL SUBOPT_0x9
000145 9719      	SBIW R26,9
000146 f411      	BRNE _0x47
                 ; 0000 0133 control2=1;
000147 d06e      	RCALL SUBOPT_0x6
000148 013f      	MOVW R6,R30
                 ; 0000 0134 //control = 2;
                 ; 0000 0135 //posicion=10;
                 ; 0000 0136 }
                 ; 0000 0137 
                 ; 0000 0138 
                 ; 0000 0139 //Detecta si se presiono el boton GO
                 ; 0000 013A if (boton4==0)
                 _0x47:
000149 9984      	SBIC 0x10,4
00014a c002      	RJMP _0x48
                 ; 0000 013B botone=0;
00014b 94e8      	CLT
00014c c001      	RJMP _0x61
                 ; 0000 013C else
                 _0x48:
                 ; 0000 013D botone=1;
00014d 9468      	SET
                 _0x61:
00014e f833      	BLD  R3,3
                 ; 0000 013E 
                 ; 0000 013F if ((botonp4==1)&&(botone==0)) { //hubo cambio de flanco de 1 a 0
00014f fe24      	SBRS R2,4
000150 c002      	RJMP _0x4B
000151 fe33      	SBRS R3,3
000152 c001      	RJMP _0x4C
                 _0x4B:
000153 c00d      	RJMP _0x4A
                 _0x4C:
                 ; 0000 0140 if(posicion > 9){
000154 d078      	RCALL SUBOPT_0x9
000155 971a      	SBIW R26,10
000156 f034      	BRLT _0x4D
                 ; 0000 0141 posicion=9;
000157 e0e9      	LDI  R30,LOW(9)
000158 e0f0      	LDI  R31,HIGH(9)
000159 93e0 00e0 	STS  _posicion,R30
00015b 93f0 00e1 	STS  _posicion+1,R31
                 ; 0000 0142 }
                 ; 0000 0143 
                 ; 0000 0144 control2=1;
                 _0x4D:
00015d d058      	RCALL SUBOPT_0x6
00015e 013f      	MOVW R6,R30
                 ; 0000 0145 control = 2;
00015f d04c      	RCALL SUBOPT_0x3
000160 d04e      	RCALL SUBOPT_0x4
                 ; 0000 0146 
                 ; 0000 0147 delay_ms(30);
                 ; 0000 0148 }
                 ; 0000 0149 
                 ; 0000 014A if ((botonp4==0)&&(botone==1)) //hubo cambio de flanco de 0 a 1
                 _0x4A:
000161 fc24      	SBRC R2,4
000162 c002      	RJMP _0x4F
000163 fc33      	SBRC R3,3
000164 c001      	RJMP _0x50
                 _0x4F:
000165 c001      	RJMP _0x4E
                 _0x50:
                 ; 0000 014B delay_ms(30);
000166 d04c      	RCALL SUBOPT_0x5
                 ; 0000 014C botonp4=botone;
                 _0x4E:
000167 fa33      	BST  R3,3
000168 f824      	BLD  R2,4
                 ; 0000 014D //control2 = 1;
                 ; 0000 014E }
000169 cf7b      	RJMP _0x24
                 _0x26:
                 ; 0000 014F control2=0;
00016a 2466      	CLR  R6
00016b 2477      	CLR  R7
                 ; 0000 0150 
                 ; 0000 0151 } else if(control==1){ //Se presiono el boton CLEAR por lo tanto limpia
00016c c02f      	RJMP _0x51
                 _0x23:
00016d d048      	RCALL SUBOPT_0x6
00016e 15e4      	CP   R30,R4
00016f 05f5      	CPC  R31,R5
000170 f4f1      	BRNE _0x52
                 ; 0000 0152 while(control3<10){
                 _0x53:
000171 e0ea      	LDI  R30,LOW(10)
000172 e0f0      	LDI  R31,HIGH(10)
000173 168e      	CP   R8,R30
000174 069f      	CPC  R9,R31
000175 f47c      	BRGE _0x55
                 ; 0000 0153 movimientos[control3]=0;
000176 01f4      	MOVW R30,R8
000177 eea2      	LDI  R26,LOW(_movimientos)
000178 e0b0      	LDI  R27,HIGH(_movimientos)
000179 0fee      	LSL  R30
00017a 1fff      	ROL  R31
00017b 0fae      	ADD  R26,R30
00017c 1fbf      	ADC  R27,R31
00017d e0e0      	LDI  R30,LOW(0)
00017e e0f0      	LDI  R31,HIGH(0)
00017f 93ed      	ST   X+,R30
000180 93fc      	ST   X,R31
                 ; 0000 0154 control3++;
000181 01f4      	MOVW R30,R8
000182 9631      	ADIW R30,1
000183 014f      	MOVW R8,R30
                 ; 0000 0155 }
000184 cfec      	RJMP _0x53
                 _0x55:
                 ; 0000 0156 control3=0;
000185 2488      	CLR  R8
000186 2499      	CLR  R9
                 ; 0000 0157 posicion=0;
000187 e0e0      	LDI  R30,LOW(0)
000188 93e0 00e0 	STS  _posicion,R30
00018a 93e0 00e1 	STS  _posicion+1,R30
                 ; 0000 0158 control=0;
00018c 2444      	CLR  R4
00018d 2455      	CLR  R5
                 ; 0000 0159 } else if(control==2){ //Se presiono el boton GO
00018e c00d      	RJMP _0x56
                 _0x52:
00018f d01c      	RCALL SUBOPT_0x3
000190 15e4      	CP   R30,R4
000191 05f5      	CPC  R31,R5
000192 f449      	BRNE _0x57
                 ; 0000 015A mover(movimientos, posicion);//Se llama a la funcion para mostrar los movimientos junto con la cantidad de movimientos
000193 eee2      	LDI  R30,LOW(_movimientos)
000194 e0f0      	LDI  R31,HIGH(_movimientos)
000195 93fa      	ST   -Y,R31
000196 93ea      	ST   -Y,R30
000197 d035      	RCALL SUBOPT_0x9
000198 deb5      	RCALL _mover
                 ; 0000 015B control = 3;// Se mantiene en espera
000199 e0e3      	LDI  R30,LOW(3)
00019a e0f0      	LDI  R31,HIGH(3)
00019b 012f      	MOVW R4,R30
                 ; 0000 015C //posicion=10;
                 ; 0000 015D }
                 ; 0000 015E 
                 ; 0000 015F }
                 _0x57:
                 _0x56:
                 _0x51:
00019c cf1a      	RJMP _0x10
                 ; 0000 0160 }
                 _0x58:
00019d cfff      	RJMP _0x58
                 ; .FEND
                 
                 	.DSEG
                 _posicion:
0000e0           	.BYTE 0x2
                 _movimientos:
0000e2           	.BYTE 0x14
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x0:
00019e 01f5      	MOVW R30,R10
00019f 01d9      	MOVW R26,R18
0001a0 0fee      	LSL  R30
0001a1 1fff      	ROL  R31
0001a2 0fae      	ADD  R26,R30
0001a3 1fbf      	ADC  R27,R31
0001a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0001a5 91ed      	LD   R30,X+
0001a6 91fd      	LD   R31,X+
0001a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
0001a8 bbeb      	OUT  0x1B,R30
0001a9 eda0      	LDI  R26,LOW(2000)
0001aa e0b7      	LDI  R27,HIGH(2000)
0001ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001ac e0e2      	LDI  R30,LOW(2)
0001ad e0f0      	LDI  R31,HIGH(2)
0001ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0001af 012f      	MOVW R4,R30
0001b0 e1ae      	LDI  R26,LOW(30)
0001b1 e0b0      	LDI  R27,0
0001b2 c029      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x5:
0001b3 e1ae      	LDI  R26,LOW(30)
0001b4 e0b0      	LDI  R27,0
0001b5 c026      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0001b6 e0e1      	LDI  R30,LOW(1)
0001b7 e0f0      	LDI  R31,HIGH(1)
0001b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x7:
0001b9 91e0 00e0 	LDS  R30,_posicion
0001bb 91f0 00e1 	LDS  R31,_posicion+1
0001bd eea2      	LDI  R26,LOW(_movimientos)
0001be e0b0      	LDI  R27,HIGH(_movimientos)
0001bf 0fee      	LSL  R30
0001c0 1fff      	ROL  R31
0001c1 0fae      	ADD  R26,R30
0001c2 1fbf      	ADC  R27,R31
0001c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x8:
0001c4 93ed      	ST   X+,R30
0001c5 93fc      	ST   X,R31
0001c6 eea0      	LDI  R26,LOW(_posicion)
0001c7 e0b0      	LDI  R27,HIGH(_posicion)
0001c8 dfdc      	RCALL SUBOPT_0x1
0001c9 9631      	ADIW R30,1
0001ca 93fe      	ST   -X,R31
0001cb 93ee      	ST   -X,R30
0001cc cfe6      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
0001cd 91a0 00e0 	LDS  R26,_posicion
0001cf 91b0 00e1 	LDS  R27,_posicion+1
0001d1 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
0001d2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0001d3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001d4 931a      	ST   -Y,R17
0001d5 930a      	ST   -Y,R16
0001d6 9508      	RET
                 
                 __LOADLOCR4:
0001d7 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0001d8 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001d9 8119      	LDD  R17,Y+1
0001da 8108      	LD   R16,Y
0001db 9508      	RET
                 
                 _delay_ms:
0001dc 9610      	adiw r26,0
0001dd f039      	breq __delay_ms1
                 __delay_ms0:
0001de 95a8      	wdr
                +
0001df ef8a     +LDI R24 , LOW ( 0xFA )
0001e0 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0001e1 9701     +SBIW R24 , 1
0001e2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0001e3 9711      	sbiw r26,1
0001e4 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001e5 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535 register use summary:
r0 :   6 r1 :   1 r2 :  25 r3 :  24 r4 :   6 r5 :   4 r6 :   4 r7 :   2 
r8 :   5 r9 :   2 r10:   5 r11:   2 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   4 r17:   3 r18:   4 r19:   3 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  29 r27:  13 r28:   2 r29:   1 r30: 111 r31:  34 
x  :  13 y  :  12 z  :   7 
Registers used: 28 out of 35 (80.0%)

ATmega8535 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   3 
adiw  :   5 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :  14 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   3 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   7 cbi   :   0 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  10 
cls   :   0 clt   :   7 clv   :   0 clz   :   0 com   :   0 cp    :   5 
cpc   :   9 cpi   :   4 cpse  :   0 dec   :   1 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 
inc   :   0 ld    :   5 ldd   :   5 ldi   :  63 lds   :   4 lpm   :   7 
lsl   :   3 lsr   :   0 mov   :   1 movw  :  15 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   1 ori   :   0 out   :  43 
pop   :   0 push  :   0 rcall :  49 ret   :  11 reti  :   0 rjmp  :  95 
rol   :   3 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   7 
sbis  :   0 sbiw  :   9 sbr   :   0 sbrc  :  14 sbrs  :  14 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   7 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  15 std   :   0 
sts   :   4 sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   1 

Instructions used: 38 out of 114 (33.3%)

ATmega8535 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003cc    946     26    972    8192  11.9%
[.dseg] 0x000060 0x0000f6      0     22     22     512   4.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
