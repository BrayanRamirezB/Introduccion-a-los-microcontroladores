
AVRASM ver. 2.1.30  C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 18\Codigo CodeVision\Debug\List\p18.asm Sun Apr 30 16:48:42 2023

C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 18\Codigo CodeVision\Debug\List\p18.asm(1415): warning: Register r4 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 18\Codigo CodeVision\Debug\List\p18.asm(1416): warning: Register r5 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 18\Codigo CodeVision\Debug\List\p18.asm(1417): warning: Register r7 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 18\Codigo CodeVision\Debug\List\p18.asm(1418): warning: Register r6 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 18\Codigo CodeVision\Debug\List\p18.asm(1419): warning: Register r9 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 18\Codigo CodeVision\Debug\List\p18.asm(1420): warning: Register r8 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 18\Codigo CodeVision\Debug\List\p18.asm(1421): warning: Register r11 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 18\Codigo CodeVision\Debug\List\p18.asm(1422): warning: Register r10 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 18\Codigo CodeVision\Debug\List\p18.asm(1423): warning: Register r13 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 18\Codigo CodeVision\Debug\List\p18.asm(1424): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.51 Evaluation
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8535
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x20
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _tem=R4
                 	.DEF _tem_msb=R5
                 	.DEF _unidades=R7
                 	.DEF _decenas=R6
                 	.DEF _decimas=R9
                 	.DEF _cn=R8
                 	.DEF _seg=R11
                 	.DEF _min=R10
                 	.DEF _hor=R13
                 	.DEF _dia=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c03a      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 _tbl10_G101:
000015 2710
000016 03e8
000017 0064
000018 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000019 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00001a 1000
00001b 0100
00001c 0010
00001d 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00001e 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001f 0000
000020 0019      	.DB  0x0,0x0,0x19,0x0
                 
                 _0x6:
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 18\Codigo CodeVision\Debug\List\p18.asm(1470): warning: .cseg .db misalignment - padding zero byte
000021 000a      	.DB  0xA
                 _0x7:
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 18\Codigo CodeVision\Debug\List\p18.asm(1472): warning: .cseg .db misalignment - padding zero byte
000022 0013      	.DB  0x13
                 _0x8:
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 18\Codigo CodeVision\Debug\List\p18.asm(1474): warning: .cseg .db misalignment - padding zero byte
000023 0061      	.DB  0x61
                 _0x0:
000024 5345
000025 4f43
000026 004d      	.DB  0x45,0x53,0x43,0x4F,0x4D,0x0
                 _0x2000003:
000027 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000028 0001      	.DW  0x01
000029 0002      	.DW  0x02
00002a 003c      	.DW  __REG_BIT_VARS*2
                 
00002b 0004      	.DW  0x04
00002c 000a      	.DW  0x0A
00002d 003e      	.DW  __REG_VARS*2
                 
00002e 0001      	.DW  0x01
00002f 00e4      	.DW  _mes
000030 0042      	.DW  _0x6*2
                 
000031 0001      	.DW  0x01
000032 00e6      	.DW  _ye
000033 0044      	.DW  _0x7*2
                 
000034 0001      	.DW  0x01
000035 00e8      	.DW  _ar
000036 0046      	.DW  _0x8*2
                 
000037 0002      	.DW  0x02
000038 00ea      	.DW  __base_y_G100
000039 004e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00003a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003b 94f8      	CLI
00003c 27ee      	CLR  R30
00003d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003e e0f1      	LDI  R31,1
00003f bffb      	OUT  GICR,R31
000040 bfeb      	OUT  GICR,R30
000041 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000042 e08d      	LDI  R24,(14-2)+1
000043 e0a2      	LDI  R26,2
000044 27bb      	CLR  R27
                 __CLEAR_REG:
000045 93ed      	ST   X+,R30
000046 958a      	DEC  R24
000047 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000048 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000049 e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004b 93ed      	ST   X+,R30
00004c 9701      	SBIW R24,1
00004d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004e e5e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000050 9185      	LPM  R24,Z+
000051 9195      	LPM  R25,Z+
000052 9700      	SBIW R24,0
000053 f061      	BREQ __GLOBAL_INI_END
000054 91a5      	LPM  R26,Z+
000055 91b5      	LPM  R27,Z+
000056 9005      	LPM  R0,Z+
000057 9015      	LPM  R1,Z+
000058 01bf      	MOVW R22,R30
000059 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005a 9005      	LPM  R0,Z+
00005b 920d      	ST   X+,R0
00005c 9701      	SBIW R24,1
00005d f7e1      	BRNE __GLOBAL_INI_LOOP
00005e 01fb      	MOVW R30,R22
00005f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000060 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000061 bfed      	OUT  SPL,R30
000062 e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000063 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000064 eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000065 e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000066 c00d      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0025 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0026 ADMUX=adc_input | ADC_VREF_TYPE;
000067 d1cb      	RCALL SUBOPT_0x0
                 ;	adc_input -> R17
000068 2fe1      	MOV  R30,R17
000069 66e0      	ORI  R30,LOW(0x60)
00006a b9e7      	OUT  0x7,R30
                 ; 0000 0027 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0028 delay_us(10);
                +
00006b e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00006c 958a     +DEC R24
00006d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0029 // Start the AD conversion
                 ; 0000 002A ADCSRA|=(1<<ADSC);
00006e 9a36      	SBI  0x6,6
                 ; 0000 002B // Wait for the AD conversion to complete
                 ; 0000 002C while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
00006f 9b34      	SBIS 0x6,4
000070 cffe      	RJMP _0x3
                 ; 0000 002D ADCSRA|=(1<<ADIF);
000071 9a34      	SBI  0x6,4
                 ; 0000 002E return ADCH;
000072 b1e5      	IN   R30,0x5
000073 c1bd      	RJMP _0x2080001
                 ; 0000 002F }
                 ; .FEND
                 
                 	.DSEG
                 ;void main(void)
                 ; 0000 0040 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0041 // Declare your local variables here
                 ; 0000 0042 
                 ; 0000 0043 // Input/Output Ports initialization
                 ; 0000 0044 // Port A initialization
                 ; 0000 0045 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0046 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000074 e0e0      	LDI  R30,LOW(0)
000075 bbea      	OUT  0x1A,R30
                 ; 0000 0047 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0048 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000076 bbeb      	OUT  0x1B,R30
                 ; 0000 0049 
                 ; 0000 004A // Port B initialization
                 ; 0000 004B // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 004C DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
000077 efef      	LDI  R30,LOW(255)
000078 bbe7      	OUT  0x17,R30
                 ; 0000 004D // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 004E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000079 e0e0      	LDI  R30,LOW(0)
00007a bbe8      	OUT  0x18,R30
                 ; 0000 004F 
                 ; 0000 0050 // Port C initialization
                 ; 0000 0051 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0052 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00007b bbe4      	OUT  0x14,R30
                 ; 0000 0053 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0054 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00007c bbe5      	OUT  0x15,R30
                 ; 0000 0055 
                 ; 0000 0056 // Port D initialization
                 ; 0000 0057 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0058 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00007d bbe1      	OUT  0x11,R30
                 ; 0000 0059 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 005A PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
00007e efef      	LDI  R30,LOW(255)
00007f bbe2      	OUT  0x12,R30
                 ; 0000 005B 
                 ; 0000 005C // Timer/Counter 0 initialization
                 ; 0000 005D // Clock source: System Clock
                 ; 0000 005E // Clock value: Timer 0 Stopped
                 ; 0000 005F // Mode: Normal top=0xFF
                 ; 0000 0060 // OC0 output: Disconnected
                 ; 0000 0061 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000080 e0e0      	LDI  R30,LOW(0)
000081 bfe3      	OUT  0x33,R30
                 ; 0000 0062 TCNT0=0x00;
000082 bfe2      	OUT  0x32,R30
                 ; 0000 0063 OCR0=0x00;
000083 bfec      	OUT  0x3C,R30
                 ; 0000 0064 
                 ; 0000 0065 // Timer/Counter 1 initialization
                 ; 0000 0066 // Clock source: System Clock
                 ; 0000 0067 // Clock value: Timer1 Stopped
                 ; 0000 0068 // Mode: Normal top=0xFFFF
                 ; 0000 0069 // OC1A output: Disconnected
                 ; 0000 006A // OC1B output: Disconnected
                 ; 0000 006B // Noise Canceler: Off
                 ; 0000 006C // Input Capture on Falling Edge
                 ; 0000 006D // Timer1 Overflow Interrupt: Off
                 ; 0000 006E // Input Capture Interrupt: Off
                 ; 0000 006F // Compare A Match Interrupt: Off
                 ; 0000 0070 // Compare B Match Interrupt: Off
                 ; 0000 0071 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000084 bdef      	OUT  0x2F,R30
                 ; 0000 0072 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000085 bdee      	OUT  0x2E,R30
                 ; 0000 0073 TCNT1H=0x00;
000086 bded      	OUT  0x2D,R30
                 ; 0000 0074 TCNT1L=0x00;
000087 bdec      	OUT  0x2C,R30
                 ; 0000 0075 ICR1H=0x00;
000088 bde7      	OUT  0x27,R30
                 ; 0000 0076 ICR1L=0x00;
000089 bde6      	OUT  0x26,R30
                 ; 0000 0077 OCR1AH=0x00;
00008a bdeb      	OUT  0x2B,R30
                 ; 0000 0078 OCR1AL=0x00;
00008b bdea      	OUT  0x2A,R30
                 ; 0000 0079 OCR1BH=0x00;
00008c bde9      	OUT  0x29,R30
                 ; 0000 007A OCR1BL=0x00;
00008d bde8      	OUT  0x28,R30
                 ; 0000 007B 
                 ; 0000 007C // Timer/Counter 2 initialization
                 ; 0000 007D // Clock source: System Clock
                 ; 0000 007E // Clock value: Timer2 Stopped
                 ; 0000 007F // Mode: Normal top=0xFF
                 ; 0000 0080 // OC2 output: Disconnected
                 ; 0000 0081 ASSR=0<<AS2;
00008e bde2      	OUT  0x22,R30
                 ; 0000 0082 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00008f bde5      	OUT  0x25,R30
                 ; 0000 0083 TCNT2=0x00;
000090 bde4      	OUT  0x24,R30
                 ; 0000 0084 OCR2=0x00;
000091 bde3      	OUT  0x23,R30
                 ; 0000 0085 
                 ; 0000 0086 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0087 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000092 bfe9      	OUT  0x39,R30
                 ; 0000 0088 
                 ; 0000 0089 // External Interrupt(s) initialization
                 ; 0000 008A // INT0: Off
                 ; 0000 008B // INT1: Off
                 ; 0000 008C // INT2: Off
                 ; 0000 008D MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000093 bfe5      	OUT  0x35,R30
                 ; 0000 008E MCUCSR=(0<<ISC2);
000094 bfe4      	OUT  0x34,R30
                 ; 0000 008F 
                 ; 0000 0090 // USART initialization
                 ; 0000 0091 // USART disabled
                 ; 0000 0092 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000095 b9ea      	OUT  0xA,R30
                 ; 0000 0093 
                 ; 0000 0094 // Analog Comparator initialization
                 ; 0000 0095 // Analog Comparator: Off
                 ; 0000 0096 // The Analog Comparator's positive input is
                 ; 0000 0097 // connected to the AIN0 pin
                 ; 0000 0098 // The Analog Comparator's negative input is
                 ; 0000 0099 // connected to the AIN1 pin
                 ; 0000 009A ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000096 e8e0      	LDI  R30,LOW(128)
000097 b9e8      	OUT  0x8,R30
                 ; 0000 009B 
                 ; 0000 009C // ADC initialization
                 ; 0000 009D // ADC Clock frequency: 500.000 kHz
                 ; 0000 009E // ADC Voltage Reference: AVCC pin
                 ; 0000 009F // ADC High Speed Mode: Off
                 ; 0000 00A0 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00A1 // Only the 8 most significant bits of
                 ; 0000 00A2 // the AD conversion result are used
                 ; 0000 00A3 ADMUX=ADC_VREF_TYPE;
000098 e6e0      	LDI  R30,LOW(96)
000099 b9e7      	OUT  0x7,R30
                 ; 0000 00A4 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
00009a e8e1      	LDI  R30,LOW(129)
00009b b9e6      	OUT  0x6,R30
                 ; 0000 00A5 SFIOR=(1<<ADHSM) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00009c e1e0      	LDI  R30,LOW(16)
00009d bfe0      	OUT  0x30,R30
                 ; 0000 00A6 
                 ; 0000 00A7 // SPI initialization
                 ; 0000 00A8 // SPI disabled
                 ; 0000 00A9 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00009e e0e0      	LDI  R30,LOW(0)
00009f b9ed      	OUT  0xD,R30
                 ; 0000 00AA 
                 ; 0000 00AB // TWI initialization
                 ; 0000 00AC // TWI disabled
                 ; 0000 00AD TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000a0 bfe6      	OUT  0x36,R30
                 ; 0000 00AE 
                 ; 0000 00AF // Alphanumeric LCD initialization
                 ; 0000 00B0 // Connections are specified in the
                 ; 0000 00B1 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00B2 // RS: PORTB Bit 0
                 ; 0000 00B3 // RD: PORTB Bit 1
                 ; 0000 00B4 // EN: PORTB Bit 2
                 ; 0000 00B5 // D4: PORTB Bit 4
                 ; 0000 00B6 // D5: PORTB Bit 5
                 ; 0000 00B7 // D6: PORTB Bit 6
                 ; 0000 00B8 // D7: PORTB Bit 7
                 ; 0000 00B9 // Characters/line: 8
                 ; 0000 00BA lcd_init(16);
0000a1 e1a0      	LDI  R26,LOW(16)
0000a2 d166      	RCALL _lcd_init
                 ; 0000 00BB 
                 ; 0000 00BC while (1)
                 _0x9:
                 ; 0000 00BD {
                 ; 0000 00BE // Place your code here
                 ; 0000 00BF 
                 ; 0000 00C0 if(cambio==0)
0000a3 9980      	SBIC 0x10,0
0000a4 c002      	RJMP _0xC
                 ; 0000 00C1 
                 ; 0000 00C2 btna=0;
0000a5 94e8      	CLT
0000a6 c001      	RJMP _0x24
                 ; 0000 00C3 else
                 _0xC:
                 ; 0000 00C4 btna=1;
0000a7 9468      	SET
                 _0x24:
0000a8 f821      	BLD  R2,1
                 ; 0000 00C5 if((btnp==1)&&(btna==0)){
0000a9 fe20      	SBRS R2,0
0000aa c002      	RJMP _0xF
0000ab fe21      	SBRS R2,1
0000ac c001      	RJMP _0x10
                 _0xF:
0000ad c009      	RJMP _0xE
                 _0x10:
                 ; 0000 00C6 
                 ; 0000 00C7 if(change==0){
0000ae 91e0 00e5 	LDS  R30,_change
0000b0 30e0      	CPI  R30,0
0000b1 f411      	BRNE _0x11
                 ; 0000 00C8 
                 ; 0000 00C9 change=1;
0000b2 e0e1      	LDI  R30,LOW(1)
0000b3 c001      	RJMP _0x25
                 ; 0000 00CA }
                 ; 0000 00CB else{
                 _0x11:
                 ; 0000 00CC change=0;
0000b4 e0e0      	LDI  R30,LOW(0)
                 _0x25:
0000b5 93e0 00e5 	STS  _change,R30
                 ; 0000 00CD }
                 ; 0000 00CE }
                 ; 0000 00CF btnp=btna;
                 _0xE:
0000b7 fa21      	BST  R2,1
0000b8 f820      	BLD  R2,0
                 ; 0000 00D0 
                 ; 0000 00D1 
                 ; 0000 00D2 
                 ; 0000 00D3 
                 ; 0000 00D4 lcd_gotoxy(11,0);
0000b9 e0eb      	LDI  R30,LOW(11)
0000ba d17b      	RCALL SUBOPT_0x1
                 ; 0000 00D5 lcd_putsf("ESCOM");
                +
0000bb e4a8     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000bc e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000bd d13c      	RCALL _lcd_putsf
                 ; 0000 00D6 
                 ; 0000 00D7 
                 ; 0000 00D8 cn=read_adc(0);
0000be e0a0      	LDI  R26,LOW(0)
0000bf dfa7      	RCALL _read_adc
0000c0 2e8e      	MOV  R8,R30
                 ; 0000 00D9 
                 ; 0000 00DA cel=cn*1.45;
0000c1 e0f0      	LDI  R31,0
                +
0000c2 2f6f     +MOV R22 , R31
0000c3 0f66     +ADD R22 , R22
0000c4 0b66     +SBC R22 , R22
0000c5 2f76     +MOV R23 , R22
                 	__CWD1
0000c6 d25b      	RCALL __CDF1
                +
0000c7 e9aa     +LDI R26 , LOW ( 0x3FB9999A )
0000c8 e9b9     +LDI R27 , HIGH ( 0x3FB9999A )
0000c9 eb89     +LDI R24 , BYTE3 ( 0x3FB9999A )
0000ca e39f     +LDI R25 , BYTE4 ( 0x3FB9999A )
                 	__GETD2N 0x3FB9999A
0000cb d283      	RCALL __MULF12
0000cc d16c      	RCALL SUBOPT_0x2
                 ; 0000 00DB if(cel>99)
0000cd 91a0 00e0 	LDS  R26,_cel
0000cf 91b0 00e1 	LDS  R27,_cel+1
0000d1 9180 00e2 	LDS  R24,_cel+2
0000d3 9190 00e3 	LDS  R25,_cel+3
0000d5 d16c      	RCALL SUBOPT_0x3
0000d6 d2c6      	RCALL __CMPF12
0000d7 f009      	BREQ PC+2
0000d8 f408      	BRCC PC+2
0000d9 c002      	RJMP _0x13
                 ; 0000 00DC cel=99;
0000da d167      	RCALL SUBOPT_0x3
0000db d15d      	RCALL SUBOPT_0x2
                 ; 0000 00DD tem=(cn*500/255);
                 _0x13:
0000dc 2da8      	MOV  R26,R8
0000dd e0b0      	LDI  R27,0
0000de efe4      	LDI  R30,LOW(500)
0000df e0f1      	LDI  R31,HIGH(500)
0000e0 d1d6      	RCALL __MULW12
0000e1 01df      	MOVW R26,R30
0000e2 efef      	LDI  R30,LOW(255)
0000e3 e0f0      	LDI  R31,HIGH(255)
0000e4 d1ea      	RCALL __DIVW21
0000e5 012f      	MOVW R4,R30
                 ; 0000 00DE decenas=tem/10;
0000e6 01d2      	MOVW R26,R4
0000e7 d15f      	RCALL SUBOPT_0x4
0000e8 d1e6      	RCALL __DIVW21
0000e9 2e6e      	MOV  R6,R30
                 ; 0000 00DF unidades=tem%10;
0000ea 01d2      	MOVW R26,R4
0000eb d15e      	RCALL SUBOPT_0x5
0000ec 2e7e      	MOV  R7,R30
                 ; 0000 00E0 decimas=tem%1;
0000ed 01f2      	MOVW R30,R4
0000ee 2499      	CLR  R9
                 ; 0000 00E1 
                 ; 0000 00E2 
                 ; 0000 00E3 
                 ; 0000 00E4 lcd_gotoxy(10,1);
0000ef e0ea      	LDI  R30,LOW(10)
0000f0 d15c      	RCALL SUBOPT_0x6
                 ; 0000 00E5 lcd_putchar(decenas+car);
0000f1 2da6      	MOV  R26,R6
0000f2 5da0      	SUBI R26,-LOW(48)
0000f3 d0e8      	RCALL _lcd_putchar
                 ; 0000 00E6 lcd_gotoxy(11,1);
0000f4 e0eb      	LDI  R30,LOW(11)
0000f5 d157      	RCALL SUBOPT_0x6
                 ; 0000 00E7 lcd_putchar(unidades+car);
0000f6 2da7      	MOV  R26,R7
0000f7 5da0      	SUBI R26,-LOW(48)
0000f8 d0e3      	RCALL _lcd_putchar
                 ; 0000 00E8 lcd_gotoxy(12,1);
0000f9 e0ec      	LDI  R30,LOW(12)
0000fa d152      	RCALL SUBOPT_0x6
                 ; 0000 00E9 lcd_putchar('.');
0000fb e2ae      	LDI  R26,LOW(46)
0000fc d0df      	RCALL _lcd_putchar
                 ; 0000 00EA lcd_gotoxy(13,1);
0000fd e0ed      	LDI  R30,LOW(13)
0000fe d14e      	RCALL SUBOPT_0x6
                 ; 0000 00EB lcd_putchar(decimas+car);
0000ff 2da9      	MOV  R26,R9
000100 5da0      	SUBI R26,-LOW(48)
000101 d0da      	RCALL _lcd_putchar
                 ; 0000 00EC 
                 ; 0000 00ED lcd_gotoxy(14,1);
000102 e0ee      	LDI  R30,LOW(14)
000103 d149      	RCALL SUBOPT_0x6
                 ; 0000 00EE lcd_putchar(car+175);
000104 edaf      	LDI  R26,LOW(223)
000105 d0d6      	RCALL _lcd_putchar
                 ; 0000 00EF lcd_gotoxy(15,1);
000106 e0ef      	LDI  R30,LOW(15)
000107 d145      	RCALL SUBOPT_0x6
                 ; 0000 00F0 lcd_putchar('C');
000108 e4a3      	LDI  R26,LOW(67)
000109 d0d2      	RCALL _lcd_putchar
                 ; 0000 00F1 
                 ; 0000 00F2 /////////////////////reloj en mov////////////////////////////
                 ; 0000 00F3 if(change==1){
00010a 91a0 00e5 	LDS  R26,_change
00010c 30a1      	CPI  R26,LOW(0x1)
00010d f469      	BRNE _0x14
                 ; 0000 00F4 if(ha==0){
00010e 9981      	SBIC 0x10,1
00010f c002      	RJMP _0x15
                 ; 0000 00F5 hor++;
000110 94d3      	INC  R13
                 ; 0000 00F6 delay_ms(300);
000111 d13e      	RCALL SUBOPT_0x7
                 ; 0000 00F7 }
                 ; 0000 00F8 if(mm==0){
                 _0x15:
000112 9982      	SBIC 0x10,2
000113 c002      	RJMP _0x16
                 ; 0000 00F9 min++;
000114 94a3      	INC  R10
                 ; 0000 00FA delay_ms(300);
000115 d13a      	RCALL SUBOPT_0x7
                 ; 0000 00FB }
                 ; 0000 00FC if(sd==0){
                 _0x16:
000116 9983      	SBIC 0x10,3
000117 c002      	RJMP _0x17
                 ; 0000 00FD seg++;
000118 94b3      	INC  R11
                 ; 0000 00FE delay_ms(300);
000119 d136      	RCALL SUBOPT_0x7
                 ; 0000 00FF }
                 ; 0000 0100 }else{
                 _0x17:
00011a c00f      	RJMP _0x18
                 _0x14:
                 ; 0000 0101 if(ha==0){
00011b 9981      	SBIC 0x10,1
00011c c005      	RJMP _0x19
                 ; 0000 0102 ar++;
00011d d135      	RCALL SUBOPT_0x8
                 ; 0000 0103 if(ar>99){
00011e d13c      	RCALL SUBOPT_0x9
00011f f008      	BRLO _0x1A
                 ; 0000 0104 ye++;
000120 d142      	RCALL SUBOPT_0xA
                 ; 0000 0105 ar=0;
                 ; 0000 0106 }
                 ; 0000 0107 delay_ms(300);
                 _0x1A:
000121 d12e      	RCALL SUBOPT_0x7
                 ; 0000 0108 }
                 ; 0000 0109 if(mm==0){
                 _0x19:
000122 9982      	SBIC 0x10,2
000123 c002      	RJMP _0x1B
                 ; 0000 010A mes++;
000124 d14b      	RCALL SUBOPT_0xB
                 ; 0000 010B delay_ms(300);
000125 d12a      	RCALL SUBOPT_0x7
                 ; 0000 010C }
                 ; 0000 010D if(sd==0){
                 _0x1B:
000126 9983      	SBIC 0x10,3
000127 c002      	RJMP _0x1C
                 ; 0000 010E dia++;
000128 94c3      	INC  R12
                 ; 0000 010F delay_ms(300);
000129 d126      	RCALL SUBOPT_0x7
                 ; 0000 0110 }
                 ; 0000 0111 }
                 _0x1C:
                 _0x18:
                 ; 0000 0112 
                 ; 0000 0113 
                 ; 0000 0114 delay_ms(300);
00012a d125      	RCALL SUBOPT_0x7
                 ; 0000 0115 seg++;
00012b 94b3      	INC  R11
                 ; 0000 0116 if(seg>59){
00012c e3eb      	LDI  R30,LOW(59)
00012d 15eb      	CP   R30,R11
00012e f410      	BRSH _0x1D
                 ; 0000 0117 
                 ; 0000 0118 min++;
00012f 94a3      	INC  R10
                 ; 0000 0119 seg=0;
000130 24bb      	CLR  R11
                 ; 0000 011A }
                 ; 0000 011B if(min>59){
                 _0x1D:
000131 e3eb      	LDI  R30,LOW(59)
000132 15ea      	CP   R30,R10
000133 f418      	BRSH _0x1E
                 ; 0000 011C 
                 ; 0000 011D hor++;
000134 94d3      	INC  R13
                 ; 0000 011E min=0;
000135 24aa      	CLR  R10
                 ; 0000 011F seg=0;
000136 24bb      	CLR  R11
                 ; 0000 0120 
                 ; 0000 0121 }
                 ; 0000 0122 if(hor>23){
                 _0x1E:
000137 e1e7      	LDI  R30,LOW(23)
000138 15ed      	CP   R30,R13
000139 f420      	BRSH _0x1F
                 ; 0000 0123 
                 ; 0000 0124 dia++;
00013a 94c3      	INC  R12
                 ; 0000 0125 hor=0;
00013b 24dd      	CLR  R13
                 ; 0000 0126 seg=0;
00013c 24bb      	CLR  R11
                 ; 0000 0127 min=0;
00013d 24aa      	CLR  R10
                 ; 0000 0128 }
                 ; 0000 0129 
                 ; 0000 012A if(dia>31){
                 _0x1F:
00013e e1ef      	LDI  R30,LOW(31)
00013f 15ec      	CP   R30,R12
000140 f410      	BRSH _0x20
                 ; 0000 012B mes++;
000141 d12e      	RCALL SUBOPT_0xB
                 ; 0000 012C dia=0;
000142 24cc      	CLR  R12
                 ; 0000 012D }
                 ; 0000 012E if(mes>12){
                 _0x20:
000143 91a0 00e4 	LDS  R26,_mes
000145 30ad      	CPI  R26,LOW(0xD)
000146 f038      	BRLO _0x21
                 ; 0000 012F ar++;
000147 d10b      	RCALL SUBOPT_0x8
                 ; 0000 0130 mes=0;
000148 e0e0      	LDI  R30,LOW(0)
000149 93e0 00e4 	STS  _mes,R30
                 ; 0000 0131 if(ar>99){
00014b d10f      	RCALL SUBOPT_0x9
00014c f008      	BRLO _0x22
                 ; 0000 0132 ye++;
00014d d115      	RCALL SUBOPT_0xA
                 ; 0000 0133 ar=0;
                 ; 0000 0134 }
                 ; 0000 0135 }
                 _0x22:
                 ; 0000 0136 ///////////////////////////////////////////////hora//////////////////////////
                 ; 0000 0137 lcd_gotoxy(0,1);
                 _0x21:
00014e e0e0      	LDI  R30,LOW(0)
00014f d0fd      	RCALL SUBOPT_0x6
                 ; 0000 0138 lcd_putchar(hor/10+car);
000150 2dad      	MOV  R26,R13
000151 d124      	RCALL SUBOPT_0xC
                 ; 0000 0139 lcd_gotoxy(1,1);
000152 e0e1      	LDI  R30,LOW(1)
000153 d0f9      	RCALL SUBOPT_0x6
                 ; 0000 013A lcd_putchar(hor%10+car);
000154 2dad      	MOV  R26,R13
000155 d126      	RCALL SUBOPT_0xD
000156 d127      	RCALL SUBOPT_0xE
                 ; 0000 013B 
                 ; 0000 013C lcd_gotoxy(2,1);
000157 e0e2      	LDI  R30,LOW(2)
000158 d0f4      	RCALL SUBOPT_0x6
                 ; 0000 013D lcd_putchar(':');
000159 e3aa      	LDI  R26,LOW(58)
00015a d081      	RCALL _lcd_putchar
                 ; 0000 013E 
                 ; 0000 013F lcd_gotoxy(3,1);
00015b e0e3      	LDI  R30,LOW(3)
00015c d0f0      	RCALL SUBOPT_0x6
                 ; 0000 0140 lcd_putchar(min/10+car);
00015d 2daa      	MOV  R26,R10
00015e d117      	RCALL SUBOPT_0xC
                 ; 0000 0141 lcd_gotoxy(4,1);
00015f e0e4      	LDI  R30,LOW(4)
000160 d0ec      	RCALL SUBOPT_0x6
                 ; 0000 0142 lcd_putchar(min%10+car);
000161 2daa      	MOV  R26,R10
000162 d119      	RCALL SUBOPT_0xD
000163 d11a      	RCALL SUBOPT_0xE
                 ; 0000 0143 
                 ; 0000 0144 lcd_gotoxy(5,1);
000164 e0e5      	LDI  R30,LOW(5)
000165 d0e7      	RCALL SUBOPT_0x6
                 ; 0000 0145 lcd_putchar(':');
000166 e3aa      	LDI  R26,LOW(58)
000167 d074      	RCALL _lcd_putchar
                 ; 0000 0146 
                 ; 0000 0147 lcd_gotoxy(6,1);
000168 e0e6      	LDI  R30,LOW(6)
000169 d0e3      	RCALL SUBOPT_0x6
                 ; 0000 0148 lcd_putchar(seg/10+car);
00016a 2dab      	MOV  R26,R11
00016b d10a      	RCALL SUBOPT_0xC
                 ; 0000 0149 lcd_gotoxy(7,1);
00016c e0e7      	LDI  R30,LOW(7)
00016d d0df      	RCALL SUBOPT_0x6
                 ; 0000 014A lcd_putchar(seg%10+car);
00016e 2dab      	MOV  R26,R11
00016f d10c      	RCALL SUBOPT_0xD
000170 d10d      	RCALL SUBOPT_0xE
                 ; 0000 014B 
                 ; 0000 014C ////////////////////////////////////////////fecha///////////////////////////////////////////
                 ; 0000 014D 
                 ; 0000 014E lcd_gotoxy(0,0);
000171 e0e0      	LDI  R30,LOW(0)
000172 d0c3      	RCALL SUBOPT_0x1
                 ; 0000 014F lcd_putchar(ye/10+car);
000173 d10d      	RCALL SUBOPT_0xF
000174 d147      	RCALL __DIVW21U
000175 d108      	RCALL SUBOPT_0xE
                 ; 0000 0150 lcd_gotoxy(1,0);
000176 e0e1      	LDI  R30,LOW(1)
000177 d0be      	RCALL SUBOPT_0x1
                 ; 0000 0151 lcd_putchar(ye%10+car);
000178 d108      	RCALL SUBOPT_0xF
000179 d15a      	RCALL __MODW21U
00017a d103      	RCALL SUBOPT_0xE
                 ; 0000 0152 lcd_gotoxy(2,0);
00017b e0e2      	LDI  R30,LOW(2)
00017c d0b9      	RCALL SUBOPT_0x1
                 ; 0000 0153 lcd_putchar(ar/10+car);
00017d d108      	RCALL SUBOPT_0x10
00017e d13d      	RCALL __DIVW21U
00017f d0fe      	RCALL SUBOPT_0xE
                 ; 0000 0154 lcd_gotoxy(3,0);
000180 e0e3      	LDI  R30,LOW(3)
000181 d0b4      	RCALL SUBOPT_0x1
                 ; 0000 0155 lcd_putchar(ar%10+car);
000182 d103      	RCALL SUBOPT_0x10
000183 d150      	RCALL __MODW21U
000184 d0f9      	RCALL SUBOPT_0xE
                 ; 0000 0156 
                 ; 0000 0157 
                 ; 0000 0158 
                 ; 0000 0159 lcd_gotoxy(4,0);
000185 e0e4      	LDI  R30,LOW(4)
000186 d0af      	RCALL SUBOPT_0x1
                 ; 0000 015A lcd_putchar('-');
000187 e2ad      	LDI  R26,LOW(45)
000188 d053      	RCALL _lcd_putchar
                 ; 0000 015B 
                 ; 0000 015C lcd_gotoxy(5,0);
000189 e0e5      	LDI  R30,LOW(5)
00018a d0ab      	RCALL SUBOPT_0x1
                 ; 0000 015D lcd_putchar(mes/10+car);
00018b 91a0 00e4 	LDS  R26,_mes
00018d d0e8      	RCALL SUBOPT_0xC
                 ; 0000 015E lcd_gotoxy(6,0);
00018e e0e6      	LDI  R30,LOW(6)
00018f d0a6      	RCALL SUBOPT_0x1
                 ; 0000 015F lcd_putchar(mes%10+car);
000190 91a0 00e4 	LDS  R26,_mes
000192 d0e9      	RCALL SUBOPT_0xD
000193 d0ea      	RCALL SUBOPT_0xE
                 ; 0000 0160 
                 ; 0000 0161 lcd_gotoxy(7,0);
000194 e0e7      	LDI  R30,LOW(7)
000195 d0a0      	RCALL SUBOPT_0x1
                 ; 0000 0162 lcd_putchar('-');
000196 e2ad      	LDI  R26,LOW(45)
000197 d044      	RCALL _lcd_putchar
                 ; 0000 0163 
                 ; 0000 0164 lcd_gotoxy(8,0);
000198 e0e8      	LDI  R30,LOW(8)
000199 d09c      	RCALL SUBOPT_0x1
                 ; 0000 0165 lcd_putchar(dia/10+car);
00019a 2dac      	MOV  R26,R12
00019b d0da      	RCALL SUBOPT_0xC
                 ; 0000 0166 lcd_gotoxy(9,0);
00019c e0e9      	LDI  R30,LOW(9)
00019d d098      	RCALL SUBOPT_0x1
                 ; 0000 0167 lcd_putchar(dia%10+car);
00019e 2dac      	MOV  R26,R12
00019f d0dc      	RCALL SUBOPT_0xD
0001a0 d0dd      	RCALL SUBOPT_0xE
                 ; 0000 0168 }
0001a1 cf01      	RJMP _0x9
                 ; 0000 0169 }
                 _0x23:
0001a2 cfff      	RJMP _0x23
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001a3 d08f      	RCALL SUBOPT_0x0
0001a4 b3e8      	IN   R30,0x18
0001a5 70ef      	ANDI R30,LOW(0xF)
0001a6 2fae      	MOV  R26,R30
0001a7 2fe1      	MOV  R30,R17
0001a8 7fe0      	ANDI R30,LOW(0xF0)
0001a9 2bea      	OR   R30,R26
0001aa bbe8      	OUT  0x18,R30
0001ab d0df      	RCALL SUBOPT_0x11
0001ac 9ac2      	SBI  0x18,2
0001ad d0dd      	RCALL SUBOPT_0x11
0001ae 98c2      	CBI  0x18,2
0001af d0db      	RCALL SUBOPT_0x11
0001b0 c080      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001b1 93aa      	ST   -Y,R26
0001b2 81a8      	LD   R26,Y
0001b3 dfef      	RCALL __lcd_write_nibble_G100
0001b4 81e8          ld    r30,y
0001b5 95e2          swap  r30
0001b6 83e8          st    y,r30
0001b7 81a8      	LD   R26,Y
0001b8 dfea      	RCALL __lcd_write_nibble_G100
                +
0001b9 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0001ba 958a     +DEC R24
0001bb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0001bc 9621      	ADIW R28,1
0001bd 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001be d0dc      	RCALL __SAVELOCR2
0001bf 2f1a      	MOV  R17,R26
0001c0 810a      	LDD  R16,Y+2
0001c1 2fe1      	MOV  R30,R17
0001c2 e0f0      	LDI  R31,0
0001c3 51e6      	SUBI R30,LOW(-__base_y_G100)
0001c4 4fff      	SBCI R31,HIGH(-__base_y_G100)
0001c5 81e0      	LD   R30,Z
0001c6 0fe0      	ADD  R30,R16
0001c7 2fae      	MOV  R26,R30
0001c8 dfe8      	RCALL __lcd_write_data
0001c9 9300 00ee 	STS  __lcd_x,R16
0001cb 9310 00ef 	STS  __lcd_y,R17
0001cd d0d2      	RCALL __LOADLOCR2
0001ce 9623      	ADIW R28,3
0001cf 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001d0 e0a2      	LDI  R26,LOW(2)
0001d1 d0bd      	RCALL SUBOPT_0x12
0001d2 e0ac      	LDI  R26,LOW(12)
0001d3 dfdd      	RCALL __lcd_write_data
0001d4 e0a1      	LDI  R26,LOW(1)
0001d5 d0b9      	RCALL SUBOPT_0x12
0001d6 e0e0      	LDI  R30,LOW(0)
0001d7 93e0 00ef 	STS  __lcd_y,R30
0001d9 93e0 00ee 	STS  __lcd_x,R30
0001db 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001dc d056      	RCALL SUBOPT_0x0
0001dd 301a      	CPI  R17,10
0001de f031      	BREQ _0x2000005
0001df 91e0 00f0 	LDS  R30,__lcd_maxx
0001e1 91a0 00ee 	LDS  R26,__lcd_x
0001e3 17ae      	CP   R26,R30
0001e4 f058      	BRLO _0x2000004
                 _0x2000005:
0001e5 e0e0      	LDI  R30,LOW(0)
0001e6 93ea      	ST   -Y,R30
0001e7 91a0 00ef 	LDS  R26,__lcd_y
0001e9 5faf      	SUBI R26,-LOW(1)
0001ea 93a0 00ef 	STS  __lcd_y,R26
0001ec dfd1      	RCALL _lcd_gotoxy
0001ed 301a      	CPI  R17,10
0001ee f409      	BRNE _0x2000007
0001ef c041      	RJMP _0x2080001
                 _0x2000007:
                 _0x2000004:
0001f0 91e0 00ee 	LDS  R30,__lcd_x
0001f2 5fef      	SUBI R30,-LOW(1)
0001f3 93e0 00ee 	STS  __lcd_x,R30
0001f5 9ac0      	SBI  0x18,0
0001f6 2fa1      	MOV  R26,R17
0001f7 dfb9      	RCALL __lcd_write_data
0001f8 98c0      	CBI  0x18,0
0001f9 c037      	RJMP _0x2080001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0001fa d09e      	RCALL __SAVELOCR4
0001fb 019d      	MOVW R18,R26
                 _0x200000B:
0001fc 01f9      	MOVW R30,R18
                +
0001fd 5f2f     +SUBI R18 , LOW ( - 1 )
0001fe 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0001ff 91e4      	LPM  R30,Z
000200 2f1e      	MOV  R17,R30
000201 30e0      	CPI  R30,0
000202 f019      	BREQ _0x200000D
000203 2fa1      	MOV  R26,R17
000204 dfd7      	RCALL _lcd_putchar
000205 cff6      	RJMP _0x200000B
                 _0x200000D:
000206 d097      	RCALL __LOADLOCR4
000207 9624      	ADIW R28,4
000208 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000209 d029      	RCALL SUBOPT_0x0
00020a b3e7      	IN   R30,0x17
00020b 6fe0      	ORI  R30,LOW(0xF0)
00020c bbe7      	OUT  0x17,R30
00020d 9aba      	SBI  0x17,2
00020e 9ab8      	SBI  0x17,0
00020f 9ab9      	SBI  0x17,1
000210 98c2      	CBI  0x18,2
000211 98c0      	CBI  0x18,0
000212 98c1      	CBI  0x18,1
000213 9310 00f0 	STS  __lcd_maxx,R17
000215 2fe1      	MOV  R30,R17
000216 58e0      	SUBI R30,-LOW(128)
                +
000217 93e0 00ec+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000219 2fe1      	MOV  R30,R17
00021a 54e0      	SUBI R30,-LOW(192)
                +
00021b 93e0 00ed+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00021d e1a4      	LDI  R26,LOW(20)
00021e e0b0      	LDI  R27,0
00021f d19d      	RCALL _delay_ms
000220 d072      	RCALL SUBOPT_0x13
000221 d071      	RCALL SUBOPT_0x13
000222 d070      	RCALL SUBOPT_0x13
000223 e2a0      	LDI  R26,LOW(32)
000224 df7e      	RCALL __lcd_write_nibble_G100
                +
000225 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000226 958a     +DEC R24
000227 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000228 e2a8      	LDI  R26,LOW(40)
000229 df87      	RCALL __lcd_write_data
00022a e0a4      	LDI  R26,LOW(4)
00022b df85      	RCALL __lcd_write_data
00022c e8a5      	LDI  R26,LOW(133)
00022d df83      	RCALL __lcd_write_data
00022e e0a6      	LDI  R26,LOW(6)
00022f df81      	RCALL __lcd_write_data
000230 df9f      	RCALL _lcd_clear
                 _0x2080001:
000231 9119      	LD   R17,Y+
000232 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _cel:
0000e0           	.BYTE 0x4
                 _mes:
0000e4           	.BYTE 0x1
                 _change:
0000e5           	.BYTE 0x1
                 _ye:
0000e6           	.BYTE 0x2
                 _ar:
0000e8           	.BYTE 0x2
                 __base_y_G100:
0000ea           	.BYTE 0x4
                 __lcd_x:
0000ee           	.BYTE 0x1
                 __lcd_y:
0000ef           	.BYTE 0x1
                 __lcd_maxx:
0000f0           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000233 931a      	ST   -Y,R17
000234 2f1a      	MOV  R17,R26
000235 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x1:
000236 93ea      	ST   -Y,R30
000237 e0a0      	LDI  R26,LOW(0)
000238 cf85      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000239 93e0 00e0 	STS  _cel,R30
00023b 93f0 00e1 	STS  _cel+1,R31
00023d 9360 00e2 	STS  _cel+2,R22
00023f 9370 00e3 	STS  _cel+3,R23
000241 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
                +
000242 e0e0     +LDI R30 , LOW ( 0x42C60000 )
000243 e0f0     +LDI R31 , HIGH ( 0x42C60000 )
000244 ec66     +LDI R22 , BYTE3 ( 0x42C60000 )
000245 e472     +LDI R23 , BYTE4 ( 0x42C60000 )
                 	__GETD1N 0x42C60000
000246 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
000247 e0ea      	LDI  R30,LOW(10)
000248 e0f0      	LDI  R31,HIGH(10)
000249 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00024a dffc      	RCALL SUBOPT_0x4
00024b d08b      	RCALL __MODW21
00024c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x6:
00024d 93ea      	ST   -Y,R30
00024e e0a1      	LDI  R26,LOW(1)
00024f cf6e      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x7:
000250 e2ac      	LDI  R26,LOW(300)
000251 e0b1      	LDI  R27,HIGH(300)
000252 c16a      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
000253 eea8      	LDI  R26,LOW(_ar)
000254 e0b0      	LDI  R27,HIGH(_ar)
000255 91ed      	LD   R30,X+
000256 91fd      	LD   R31,X+
000257 9631      	ADIW R30,1
000258 93fe      	ST   -X,R31
000259 93ee      	ST   -X,R30
00025a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
00025b 91a0 00e8 	LDS  R26,_ar
00025d 91b0 00e9 	LDS  R27,_ar+1
00025f 36a4      	CPI  R26,LOW(0x64)
000260 e0e0      	LDI  R30,HIGH(0x64)
000261 07be      	CPC  R27,R30
000262 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
000263 eea6      	LDI  R26,LOW(_ye)
000264 e0b0      	LDI  R27,HIGH(_ye)
000265 91ed      	LD   R30,X+
000266 91fd      	LD   R31,X+
000267 9631      	ADIW R30,1
000268 93fe      	ST   -X,R31
000269 93ee      	ST   -X,R30
00026a e0e0      	LDI  R30,LOW(0)
00026b 93e0 00e8 	STS  _ar,R30
00026d 93e0 00e9 	STS  _ar+1,R30
00026f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
000270 91e0 00e4 	LDS  R30,_mes
000272 5fef      	SUBI R30,-LOW(1)
000273 93e0 00e4 	STS  _mes,R30
000275 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xC:
000276 e0b0      	LDI  R27,0
000277 dfcf      	RCALL SUBOPT_0x4
000278 d056      	RCALL __DIVW21
000279 5de0      	SUBI R30,-LOW(48)
00027a 2fae      	MOV  R26,R30
00027b cf60      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
00027c 27bb      	CLR  R27
00027d cfcc      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0xE:
00027e 5de0      	SUBI R30,-LOW(48)
00027f 2fae      	MOV  R26,R30
000280 cf5b      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xF:
000281 91a0 00e6 	LDS  R26,_ye
000283 91b0 00e7 	LDS  R27,_ye+1
000285 cfc1      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
000286 91a0 00e8 	LDS  R26,_ar
000288 91b0 00e9 	LDS  R27,_ar+1
00028a cfbc      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x11:
                +
00028b e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00028c 958a     +DEC R24
00028d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00028e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
00028f df21      	RCALL __lcd_write_data
000290 e0a3      	LDI  R26,LOW(3)
000291 e0b0      	LDI  R27,0
000292 c12a      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x13:
000293 e3a0      	LDI  R26,LOW(48)
000294 df0e      	RCALL __lcd_write_nibble_G100
                +
000295 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000296 958a     +DEC R24
000297 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000298 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
000299 933a      	ST   -Y,R19
                 __SAVELOCR3:
00029a 932a      	ST   -Y,R18
                 __SAVELOCR2:
00029b 931a      	ST   -Y,R17
00029c 930a      	ST   -Y,R16
00029d 9508      	RET
                 
                 __LOADLOCR4:
00029e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00029f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0002a0 8119      	LDD  R17,Y+1
0002a1 8108      	LD   R16,Y
0002a2 9508      	RET
                 
                 __ANEGW1:
0002a3 95f1      	NEG  R31
0002a4 95e1      	NEG  R30
0002a5 40f0      	SBCI R31,0
0002a6 9508      	RET
                 
                 __ANEGD1:
0002a7 95f0      	COM  R31
0002a8 9560      	COM  R22
0002a9 9570      	COM  R23
0002aa 95e1      	NEG  R30
0002ab 4fff      	SBCI R31,-1
0002ac 4f6f      	SBCI R22,-1
0002ad 4f7f      	SBCI R23,-1
0002ae 9508      	RET
                 
                 __MULW12U:
0002af 9ffa      	MUL  R31,R26
0002b0 2df0      	MOV  R31,R0
0002b1 9feb      	MUL  R30,R27
0002b2 0df0      	ADD  R31,R0
0002b3 9fea      	MUL  R30,R26
0002b4 2de0      	MOV  R30,R0
0002b5 0df1      	ADD  R31,R1
0002b6 9508      	RET
                 
                 __MULW12:
0002b7 d02d      	RCALL __CHKSIGNW
0002b8 dff6      	RCALL __MULW12U
0002b9 f40e      	BRTC __MULW121
0002ba dfe8      	RCALL __ANEGW1
                 __MULW121:
0002bb 9508      	RET
                 
                 __DIVW21U:
0002bc 2400      	CLR  R0
0002bd 2411      	CLR  R1
0002be e190      	LDI  R25,16
                 __DIVW21U1:
0002bf 0faa      	LSL  R26
0002c0 1fbb      	ROL  R27
0002c1 1c00      	ROL  R0
0002c2 1c11      	ROL  R1
0002c3 1a0e      	SUB  R0,R30
0002c4 0a1f      	SBC  R1,R31
0002c5 f418      	BRCC __DIVW21U2
0002c6 0e0e      	ADD  R0,R30
0002c7 1e1f      	ADC  R1,R31
0002c8 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002c9 60a1      	SBR  R26,1
                 __DIVW21U3:
0002ca 959a      	DEC  R25
0002cb f799      	BRNE __DIVW21U1
0002cc 01fd      	MOVW R30,R26
0002cd 01d0      	MOVW R26,R0
0002ce 9508      	RET
                 
                 __DIVW21:
0002cf d015      	RCALL __CHKSIGNW
0002d0 dfeb      	RCALL __DIVW21U
0002d1 f40e      	BRTC __DIVW211
0002d2 dfd0      	RCALL __ANEGW1
                 __DIVW211:
0002d3 9508      	RET
                 
                 __MODW21U:
0002d4 dfe7      	RCALL __DIVW21U
0002d5 01fd      	MOVW R30,R26
0002d6 9508      	RET
                 
                 __MODW21:
0002d7 94e8      	CLT
0002d8 ffb7      	SBRS R27,7
0002d9 c004      	RJMP __MODW211
0002da 95b1      	NEG  R27
0002db 95a1      	NEG  R26
0002dc 40b0      	SBCI R27,0
0002dd 9468      	SET
                 __MODW211:
0002de fdf7      	SBRC R31,7
0002df dfc3      	RCALL __ANEGW1
0002e0 dfdb      	RCALL __DIVW21U
0002e1 01fd      	MOVW R30,R26
0002e2 f40e      	BRTC __MODW212
0002e3 dfbf      	RCALL __ANEGW1
                 __MODW212:
0002e4 9508      	RET
                 
                 __CHKSIGNW:
0002e5 94e8      	CLT
0002e6 fff7      	SBRS R31,7
0002e7 c002      	RJMP __CHKSW1
0002e8 dfba      	RCALL __ANEGW1
0002e9 9468      	SET
                 __CHKSW1:
0002ea ffb7      	SBRS R27,7
0002eb c006      	RJMP __CHKSW2
0002ec 95b1      	NEG  R27
0002ed 95a1      	NEG  R26
0002ee 40b0      	SBCI R27,0
0002ef f800      	BLD  R0,0
0002f0 9403      	INC  R0
0002f1 fa00      	BST  R0,0
                 __CHKSW2:
0002f2 9508      	RET
                 
                 __ROUND_REPACK:
0002f3 2355      	TST  R21
0002f4 f442      	BRPL __REPACK
0002f5 3850      	CPI  R21,0x80
0002f6 f411      	BRNE __ROUND_REPACK0
0002f7 ffe0      	SBRS R30,0
0002f8 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0002f9 9631      	ADIW R30,1
0002fa 1f69      	ADC  R22,R25
0002fb 1f79      	ADC  R23,R25
0002fc f06b      	BRVS __REPACK1
                 
                 __REPACK:
0002fd e850      	LDI  R21,0x80
0002fe 2757      	EOR  R21,R23
0002ff f411      	BRNE __REPACK0
000300 935f      	PUSH R21
000301 c03c      	RJMP __ZERORES
                 __REPACK0:
000302 3f5f      	CPI  R21,0xFF
000303 f031      	BREQ __REPACK1
000304 0f66      	LSL  R22
000305 0c00      	LSL  R0
000306 9557      	ROR  R21
000307 9567      	ROR  R22
000308 2f75      	MOV  R23,R21
000309 9508      	RET
                 __REPACK1:
00030a 935f      	PUSH R21
00030b 2000      	TST  R0
00030c f00a      	BRMI __REPACK2
00030d c03b      	RJMP __MAXRES
                 __REPACK2:
00030e c034      	RJMP __MINRES
                 
                 __UNPACK:
00030f e850      	LDI  R21,0x80
000310 2e19      	MOV  R1,R25
000311 2215      	AND  R1,R21
000312 0f88      	LSL  R24
000313 1f99      	ROL  R25
000314 2795      	EOR  R25,R21
000315 0f55      	LSL  R21
000316 9587      	ROR  R24
                 
                 __UNPACK1:
000317 e850      	LDI  R21,0x80
000318 2e07      	MOV  R0,R23
000319 2205      	AND  R0,R21
00031a 0f66      	LSL  R22
00031b 1f77      	ROL  R23
00031c 2775      	EOR  R23,R21
00031d 0f55      	LSL  R21
00031e 9567      	ROR  R22
00031f 9508      	RET
                 
                 __CDF1U:
000320 9468      	SET
000321 c001      	RJMP __CDF1U0
                 __CDF1:
000322 94e8      	CLT
                 __CDF1U0:
000323 9730      	SBIW R30,0
000324 4060      	SBCI R22,0
000325 4070      	SBCI R23,0
000326 f0b1      	BREQ __CDF10
000327 2400      	CLR  R0
000328 f026      	BRTS __CDF11
000329 2377      	TST  R23
00032a f412      	BRPL __CDF11
00032b 9400      	COM  R0
00032c df7a      	RCALL __ANEGD1
                 __CDF11:
00032d 2e17      	MOV  R1,R23
00032e e17e      	LDI  R23,30
00032f 2011      	TST  R1
                 __CDF12:
000330 f032      	BRMI __CDF13
000331 957a      	DEC  R23
000332 0fee      	LSL  R30
000333 1fff      	ROL  R31
000334 1f66      	ROL  R22
000335 1c11      	ROL  R1
000336 cff9      	RJMP __CDF12
                 __CDF13:
000337 2fef      	MOV  R30,R31
000338 2ff6      	MOV  R31,R22
000339 2d61      	MOV  R22,R1
00033a 935f      	PUSH R21
00033b dfc1      	RCALL __REPACK
00033c 915f      	POP  R21
                 __CDF10:
00033d 9508      	RET
                 
                 __ZERORES:
00033e 27ee      	CLR  R30
00033f 27ff      	CLR  R31
000340 01bf      	MOVW R22,R30
000341 915f      	POP  R21
000342 9508      	RET
                 
                 __MINRES:
000343 efef      	SER  R30
000344 efff      	SER  R31
000345 e76f      	LDI  R22,0x7F
000346 ef7f      	SER  R23
000347 915f      	POP  R21
000348 9508      	RET
                 
                 __MAXRES:
000349 efef      	SER  R30
00034a efff      	SER  R31
00034b e76f      	LDI  R22,0x7F
00034c e77f      	LDI  R23,0x7F
00034d 915f      	POP  R21
00034e 9508      	RET
                 
                 __MULF12:
00034f 935f      	PUSH R21
000350 dfbe      	RCALL __UNPACK
000351 3870      	CPI  R23,0x80
000352 f359      	BREQ __ZERORES
000353 3890      	CPI  R25,0x80
000354 f349      	BREQ __ZERORES
000355 2401      	EOR  R0,R1
000356 9408      	SEC
000357 1f79      	ADC  R23,R25
000358 f423      	BRVC __MULF124
000359 f324      	BRLT __ZERORES
                 __MULF125:
00035a 2000      	TST  R0
00035b f33a      	BRMI __MINRES
00035c cfec      	RJMP __MAXRES
                 __MULF124:
00035d 920f      	PUSH R0
00035e 931f      	PUSH R17
00035f 932f      	PUSH R18
000360 933f      	PUSH R19
000361 934f      	PUSH R20
000362 2711      	CLR  R17
000363 2722      	CLR  R18
000364 2799      	CLR  R25
000365 9f68      	MUL  R22,R24
000366 01a0      	MOVW R20,R0
000367 9f8f      	MUL  R24,R31
000368 2d30      	MOV  R19,R0
000369 0d41      	ADD  R20,R1
00036a 1f59      	ADC  R21,R25
00036b 9f6b      	MUL  R22,R27
00036c 0d30      	ADD  R19,R0
00036d 1d41      	ADC  R20,R1
00036e 1f59      	ADC  R21,R25
00036f 9f8e      	MUL  R24,R30
000370 d027      	RCALL __MULF126
000371 9fbf      	MUL  R27,R31
000372 d025      	RCALL __MULF126
000373 9f6a      	MUL  R22,R26
000374 d023      	RCALL __MULF126
000375 9fbe      	MUL  R27,R30
000376 d01d      	RCALL __MULF127
000377 9faf      	MUL  R26,R31
000378 d01b      	RCALL __MULF127
000379 9fae      	MUL  R26,R30
00037a 0d11      	ADD  R17,R1
00037b 1f29      	ADC  R18,R25
00037c 1f39      	ADC  R19,R25
00037d 1f49      	ADC  R20,R25
00037e 1f59      	ADC  R21,R25
00037f 2fe3      	MOV  R30,R19
000380 2ff4      	MOV  R31,R20
000381 2f65      	MOV  R22,R21
000382 2f52      	MOV  R21,R18
000383 914f      	POP  R20
000384 913f      	POP  R19
000385 912f      	POP  R18
000386 911f      	POP  R17
000387 900f      	POP  R0
000388 2366      	TST  R22
000389 f02a      	BRMI __MULF122
00038a 0f55      	LSL  R21
00038b 1fee      	ROL  R30
00038c 1fff      	ROL  R31
00038d 1f66      	ROL  R22
00038e c002      	RJMP __MULF123
                 __MULF122:
00038f 9573      	INC  R23
000390 f24b      	BRVS __MULF125
                 __MULF123:
000391 df61      	RCALL __ROUND_REPACK
000392 915f      	POP  R21
000393 9508      	RET
                 
                 __MULF127:
000394 0d10      	ADD  R17,R0
000395 1d21      	ADC  R18,R1
000396 1f39      	ADC  R19,R25
000397 c002      	RJMP __MULF128
                 __MULF126:
000398 0d20      	ADD  R18,R0
000399 1d31      	ADC  R19,R1
                 __MULF128:
00039a 1f49      	ADC  R20,R25
00039b 1f59      	ADC  R21,R25
00039c 9508      	RET
                 
                 __CMPF12:
00039d 2399      	TST  R25
00039e f09a      	BRMI __CMPF120
00039f 2377      	TST  R23
0003a0 f042      	BRMI __CMPF121
0003a1 1797      	CP   R25,R23
0003a2 f048      	BRLO __CMPF122
0003a3 f429      	BRNE __CMPF121
0003a4 17ae      	CP   R26,R30
0003a5 07bf      	CPC  R27,R31
0003a6 0786      	CPC  R24,R22
0003a7 f020      	BRLO __CMPF122
0003a8 f031      	BREQ __CMPF123
                 __CMPF121:
0003a9 9498      	CLZ
0003aa 9488      	CLC
0003ab 9508      	RET
                 __CMPF122:
0003ac 9498      	CLZ
0003ad 9408      	SEC
0003ae 9508      	RET
                 __CMPF123:
0003af 9418      	SEZ
0003b0 9488      	CLC
0003b1 9508      	RET
                 __CMPF120:
0003b2 2377      	TST  R23
0003b3 f7c2      	BRPL __CMPF122
0003b4 1797      	CP   R25,R23
0003b5 f398      	BRLO __CMPF121
0003b6 f7a9      	BRNE __CMPF122
0003b7 17ea      	CP   R30,R26
0003b8 07fb      	CPC  R31,R27
0003b9 0768      	CPC  R22,R24
0003ba f388      	BRLO __CMPF122
0003bb f399      	BREQ __CMPF123
0003bc cfec      	RJMP __CMPF121
                 
                 _delay_ms:
0003bd 9610      	adiw r26,0
0003be f039      	breq __delay_ms1
                 __delay_ms0:
0003bf 95a8      	wdr
                +
0003c0 ef8a     +LDI R24 , LOW ( 0xFA )
0003c1 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0003c2 9701     +SBIW R24 , 1
0003c3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0003c4 9711      	sbiw r26,1
0003c5 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003c6 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535 register use summary:
r0 :  30 r1 :  18 r2 :   5 r3 :   0 r4 :   4 r5 :   0 r6 :   2 r7 :   2 
r8 :   2 r9 :   2 r10:   7 r11:   8 r12:   6 r13:   6 r14:   0 r15:   0 
r16:   5 r17:  23 r18:  12 r19:  11 r20:   8 r21:  31 r22:  32 r23:  25 
r24:  28 r25:  27 r26:  94 r27:  30 r28:   4 r29:   1 r30: 198 r31:  41 
x  :  11 y  :  19 z  :   9 
Registers used: 31 out of 35 (88.6%)

ATmega8535 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :  10 
adiw  :   7 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  11 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   1 brmi  :   6 brne  :  18 brpl  :   3 brsh  :   4 brtc  :   3 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   2 cbi   :   5 
cbr   :   0 clc   :   2 clh   :   0 cli   :   1 cln   :   0 clr   :  19 
cls   :   0 clt   :   4 clv   :   0 clz   :   2 com   :   4 cp    :   9 
cpc   :   5 cpi   :  11 cpse  :   0 dec   :   8 des   :   0 eor   :   4 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 
inc   :  10 ld    :  10 ldd   :   4 ldi   : 123 lds   :  20 lpm   :   9 
lsl   :   9 lsr   :   0 mov   :  45 movw  :  16 mul   :  12 muls  :   0 
mulsu :   0 neg   :   7 nop   :   0 or    :   1 ori   :   2 out   :  44 
pop   :  10 push  :   9 rcall : 148 ret   :  39 reti  :   0 rjmp  :  68 
rol   :  11 ror   :   4 sbc   :   2 sbci  :  10 sbi   :   7 sbic  :   7 
sbis  :   1 sbiw  :   6 sbr   :   1 sbrc  :   1 sbrs  :   6 sec   :   2 
seh   :   0 sei   :   0 sen   :   0 ser   :   5 ses   :   0 set   :   4 
sev   :   0 sez   :   1 sleep :   0 spm   :   0 st    :  17 std   :   0 
sts   :  18 sub   :   1 subi  :  12 swap  :   1 tst   :   9 wdr   :   1 

Instructions used: 73 out of 114 (64.0%)

ATmega8535 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00078e   1858     76   1934    8192  23.6%
[.dseg] 0x000060 0x0000f1      0     17     17     512   3.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 13 warnings
