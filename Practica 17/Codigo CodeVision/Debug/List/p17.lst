
AVRASM ver. 2.1.30  C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 17\Codigo CodeVision\Debug\List\p17.asm Wed May 03 16:42:59 2023

C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 17\Codigo CodeVision\Debug\List\p17.asm(1415): warning: Register r5 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 17\Codigo CodeVision\Debug\List\p17.asm(1416): warning: Register r4 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 17\Codigo CodeVision\Debug\List\p17.asm(1417): warning: Register r7 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 17\Codigo CodeVision\Debug\List\p17.asm(1418): warning: Register r6 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 17\Codigo CodeVision\Debug\List\p17.asm(1419): warning: Register r9 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 17\Codigo CodeVision\Debug\List\p17.asm(1420): warning: Register r8 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 17\Codigo CodeVision\Debug\List\p17.asm(1421): warning: Register r11 already defined by the .DEF directive
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 17\Codigo CodeVision\Debug\List\p17.asm(1422): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.51 Evaluation
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8535
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x20
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _modo=R5
                 	.DEF _columnas=R4
                 	.DEF _filas=R7
                 	.DEF _indice=R6
                 	.DEF _numero=R9
                 	.DEF _letra=R8
                 	.DEF _repetir=R11
                 	.DEF _renglon=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c0ca      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000015 0001
000016 0000      	.DB  0x1,0x0,0x0,0x0
000017 0000
000018 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
000019 ffff
00001a ffff
00001b ffff
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 17\Codigo CodeVision\Debug\List\p17.asm(1459): warning: .cseg .db misalignment - padding zero byte
00001c 00ff      	.DB  0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
                 _0x4:
00001d 0101
00001e 0101
00001f 0201
000020 0202      	.DB  0x1,0x1,0x1,0x1,0x1,0x2,0x2,0x2
000021 0202
000022 0404
000023 0404
000024 0804      	.DB  0x2,0x2,0x4,0x4,0x4,0x4,0x4,0x8
000025 0808
000026 0808
000027 1010
000028 1010      	.DB  0x8,0x8,0x8,0x8,0x10,0x10,0x10,0x10
000029 2010
00002a 2020
00002b 2020
00002c 4040      	.DB  0x10,0x20,0x20,0x20,0x20,0x20,0x40,0x40
00002d 4040
C:\Users\braya\Downloads\Introduccion a los microcontroladores\Practica 17\Codigo CodeVision\Debug\List\p17.asm(1465): warning: .cseg .db misalignment - padding zero byte
00002e 0040      	.DB  0x40,0x40,0x40
                 _0x5:
00002f 2e41
000030 3a36
000031 3f41
000032 003d      	.DB  0x41,0x2E,0x36,0x3A,0x41,0x3F,0x3D,0x0
000033 3f3f
000034 1e3d
000035 362e
000036 5d39      	.DB  0x3F,0x3F,0x3D,0x1E,0x2E,0x36,0x39,0x5D
000037 363e
000038 4936
000039 6b67
00003a 006d      	.DB  0x3E,0x36,0x36,0x49,0x67,0x6B,0x6D,0x0
00003b 587f
00003c 3a3a
00003d 463a
00003e 3543      	.DB  0x7F,0x58,0x3A,0x3A,0x3A,0x46,0x43,0x35
00003f 3636
000040 7c4f
000041 0e7e
000042 7876      	.DB  0x36,0x36,0x4F,0x7C,0x7E,0xE,0x76,0x78
000043 3649
000044 3636
000045 7949
000046 3636      	.DB  0x49,0x36,0x36,0x36,0x49,0x79,0x36,0x36
000047 6956      	.DB  0x56,0x69
                 _0x6:
000048 7f7f
000049 7f7f
00004a 7f7f
00004b 7f7f      	.DB  0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F
00004c 007f
00004d 7f7f
00004e 007f
00004f 7f36      	.DB  0x7F,0x0,0x7F,0x7F,0x7F,0x0,0x36,0x7F
000050 007f
000051 3636
000052 007f
000053 3636      	.DB  0x7F,0x0,0x36,0x36,0x7F,0x0,0x36,0x36
000054 0036
000055 3636
000056 4936
000057 3636      	.DB  0x36,0x0,0x36,0x36,0x36,0x49,0x36,0x36
000058 4936
000059 367f
00005a 4936
00005b 007f      	.DB  0x36,0x49,0x7F,0x36,0x36,0x49,0x7F,0x0
00005c 4936
00005d 007f
00005e 4976
00005f 007f      	.DB  0x36,0x49,0x7F,0x0,0x76,0x49,0x7F,0x0
000060 7676
000061 007f
000062 7676
000063 0076      	.DB  0x76,0x76,0x7F,0x0,0x76,0x76,0x76,0x0
000064 7676
000065 0976
000066 7676
000067 0976      	.DB  0x76,0x76,0x76,0x9,0x76,0x76,0x76,0x9
000068 767f
000069 0976
00006a 007f
00006b 0976      	.DB  0x7F,0x76,0x76,0x9,0x7F,0x0,0x76,0x9
00006c 007f
00006d 0976
00006e 007f
00006f 7676      	.DB  0x7F,0x0,0x76,0x9,0x7F,0x0,0x76,0x76
000070 007f
000071 7676
000072 0076
000073 7676      	.DB  0x7F,0x0,0x76,0x76,0x76,0x0,0x76,0x76
000074 0076
000075 7676
000076 0076
000077 767f      	.DB  0x76,0x0,0x76,0x76,0x76,0x0,0x7F,0x76
000078 0076
000079 7c7f
00007a 0076
00007b 7c7f      	.DB  0x76,0x0,0x7F,0x7C,0x76,0x0,0x7F,0x7C
00007c 007b
00007d 7c7f
00007e 077b
00007f 7c7f      	.DB  0x7B,0x0,0x7F,0x7C,0x7B,0x7,0x7F,0x7C
000080 077b
000081 7c7b
000082 077b
000083 7c7b      	.DB  0x7B,0x7,0x7B,0x7C,0x7B,0x7,0x7B,0x7C
000084 077b
000085 7c7b
000086 077f
000087 7c7b      	.DB  0x7B,0x7,0x7B,0x7C,0x7F,0x7,0x7B,0x7C
000088 007f
000089 7c7b
00008a 007f
00008b 7c76      	.DB  0x7F,0x0,0x7B,0x7C,0x7F,0x0,0x76,0x7C
00008c 007f
00008d 7676
00008e 007f
00008f 7676      	.DB  0x7F,0x0,0x76,0x76,0x7F,0x0,0x76,0x76
000090 0076
000091 7676
000092 0076
000093 7676      	.DB  0x76,0x0,0x76,0x76,0x76,0x0,0x76,0x76
000094 0076
000095 767f
000096 0076
000097 007f      	.DB  0x76,0x0,0x7F,0x76,0x76,0x0,0x7F,0x0
000098 0076
000099 007f
00009a 007d
00009b 007f      	.DB  0x76,0x0,0x7F,0x0,0x7D,0x0,0x7F,0x0
00009c 7b7d
00009d 007f
00009e 7b7d
00009f 0077      	.DB  0x7D,0x7B,0x7F,0x0,0x7D,0x7B,0x77,0x0
0000a0 7b7d
0000a1 0077
0000a2 7b7d
0000a3 0077      	.DB  0x7D,0x7B,0x77,0x0,0x7D,0x7B,0x77,0x0
0000a4 7b7f
0000a5 0077
0000a6 7f7f
0000a7 0077      	.DB  0x7F,0x7B,0x77,0x0,0x7F,0x7F,0x77,0x0
0000a8 7f7f
0000a9 007f
0000aa 7f7f
0000ab 7f7f      	.DB  0x7F,0x7F,0x7F,0x0,0x7F,0x7F,0x7F,0x7F
0000ac 7f7f
0000ad 7f7f
0000ae 7f7f
0000af 7f7f      	.DB  0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F,0x7F
0000b0 007f
0000b1 7f7f
0000b2 007f
0000b3 7f76      	.DB  0x7F,0x0,0x7F,0x7F,0x7F,0x0,0x76,0x7F
0000b4 007f
0000b5 7676
0000b6 007f
0000b7 7676      	.DB  0x7F,0x0,0x76,0x76,0x7F,0x0,0x76,0x76
0000b8 0076
0000b9 7676
0000ba 0976      	.DB  0x76,0x0,0x76,0x76,0x76,0x9
                 
                 __GLOBAL_INI_TBL:
0000bb 0008      	.DW  0x08
0000bc 0004      	.DW  0x04
0000bd 002a      	.DW  __REG_VARS*2
                 
0000be 0007      	.DW  0x07
0000bf 00e0      	.DW  _modoAct1
0000c0 0032      	.DW  _0x3*2
                 
0000c1 0023      	.DW  0x23
0000c2 00e7      	.DW  _modo2_3
0000c3 003a      	.DW  _0x4*2
                 
0000c4 0032      	.DW  0x32
0000c5 010a      	.DW  _modoNumero
0000c6 005e      	.DW  _0x5*2
                 
0000c7 00e6      	.DW  0xE6
0000c8 013c      	.DW  _modoNombre
0000c9 0090      	.DW  _0x6*2
                 
                 _0xFFFFFFFF:
0000ca 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000cb 94f8      	CLI
0000cc 27ee      	CLR  R30
0000cd bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000ce e0f1      	LDI  R31,1
0000cf bffb      	OUT  GICR,R31
0000d0 bfeb      	OUT  GICR,R30
0000d1 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000d2 e08d      	LDI  R24,(14-2)+1
0000d3 e0a2      	LDI  R26,2
0000d4 27bb      	CLR  R27
                 __CLEAR_REG:
0000d5 93ed      	ST   X+,R30
0000d6 958a      	DEC  R24
0000d7 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000d8 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000d9 e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000da e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000db 93ed      	ST   X+,R30
0000dc 9701      	SBIW R24,1
0000dd f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000de e7e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000df e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000e0 9185      	LPM  R24,Z+
0000e1 9195      	LPM  R25,Z+
0000e2 9700      	SBIW R24,0
0000e3 f061      	BREQ __GLOBAL_INI_END
0000e4 91a5      	LPM  R26,Z+
0000e5 91b5      	LPM  R27,Z+
0000e6 9005      	LPM  R0,Z+
0000e7 9015      	LPM  R1,Z+
0000e8 01bf      	MOVW R22,R30
0000e9 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000ea 9005      	LPM  R0,Z+
0000eb 920d      	ST   X+,R0
0000ec 9701      	SBIW R24,1
0000ed f7e1      	BRNE __GLOBAL_INI_LOOP
0000ee 01fb      	MOVW R30,R22
0000ef cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000f0 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000f1 bfed      	OUT  SPL,R30
0000f2 e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000f3 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000f4 eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000f5 e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000f6 c000      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 
                 	.DSEG
                 ;void cambiar_modo(){
                 ; 0000 0070 void cambiar_modo(){
                 
                 	.CSEG
                 ; 0000 0071 indice = 0;
                 ; 0000 0072 renglon = 0;
                 ; 0000 0073 numero = 0;
                 ; 0000 0074 letra = 0;
                 ; 0000 0075 repetir = 0;
                 ; 0000 0076 filas = 0;
                 ; 0000 0077 columnas = 0x01;
                 ; 0000 0078 modo++;
                 ; 0000 0079 if (modo == 5) modo = 0;
                 ; 0000 007A }
                 ;void main(void)
                 ; 0000 007E {
                 _main:
                 ; .FSTART _main
                 ; 0000 007F // Declare your local variables here
                 ; 0000 0080 
                 ; 0000 0081 // Input/Output Ports initialization
                 ; 0000 0082 // Port A initialization
                 ; 0000 0083 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0084 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000f7 e0e0      	LDI  R30,LOW(0)
0000f8 bbea      	OUT  0x1A,R30
                 ; 0000 0085 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0086 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000f9 bbeb      	OUT  0x1B,R30
                 ; 0000 0087 
                 ; 0000 0088 // Port B initialization
                 ; 0000 0089 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 008A DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000fa bbe7      	OUT  0x17,R30
                 ; 0000 008B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=P Bit1=P Bit0=P
                 ; 0000 008C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
0000fb e0e7      	LDI  R30,LOW(7)
0000fc bbe8      	OUT  0x18,R30
                 ; 0000 008D 
                 ; 0000 008E // Port C initialization
                 ; 0000 008F // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0090 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000fd efef      	LDI  R30,LOW(255)
0000fe bbe4      	OUT  0x14,R30
                 ; 0000 0091 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0092 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000ff e0e0      	LDI  R30,LOW(0)
000100 bbe5      	OUT  0x15,R30
                 ; 0000 0093 
                 ; 0000 0094 // Port D initialization
                 ; 0000 0095 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0096 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000101 efef      	LDI  R30,LOW(255)
000102 bbe1      	OUT  0x11,R30
                 ; 0000 0097 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0098 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000103 e0e0      	LDI  R30,LOW(0)
000104 bbe2      	OUT  0x12,R30
                 ; 0000 0099 
                 ; 0000 009A // Timer/Counter 0 initialization
                 ; 0000 009B // Clock source: System Clock
                 ; 0000 009C // Clock value: Timer 0 Stopped
                 ; 0000 009D // Mode: Normal top=0xFF
                 ; 0000 009E // OC0 output: Disconnected
                 ; 0000 009F TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000105 bfe3      	OUT  0x33,R30
                 ; 0000 00A0 TCNT0=0x00;
000106 bfe2      	OUT  0x32,R30
                 ; 0000 00A1 OCR0=0x00;
000107 bfec      	OUT  0x3C,R30
                 ; 0000 00A2 
                 ; 0000 00A3 // Timer/Counter 1 initialization
                 ; 0000 00A4 // Clock source: System Clock
                 ; 0000 00A5 // Clock value: Timer1 Stopped
                 ; 0000 00A6 // Mode: Normal top=0xFFFF
                 ; 0000 00A7 // OC1A output: Disconnected
                 ; 0000 00A8 // OC1B output: Disconnected
                 ; 0000 00A9 // Noise Canceler: Off
                 ; 0000 00AA // Input Capture on Falling Edge
                 ; 0000 00AB // Timer1 Overflow Interrupt: Off
                 ; 0000 00AC // Input Capture Interrupt: Off
                 ; 0000 00AD // Compare A Match Interrupt: Off
                 ; 0000 00AE // Compare B Match Interrupt: Off
                 ; 0000 00AF TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000108 bdef      	OUT  0x2F,R30
                 ; 0000 00B0 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000109 bdee      	OUT  0x2E,R30
                 ; 0000 00B1 TCNT1H=0x00;
00010a bded      	OUT  0x2D,R30
                 ; 0000 00B2 TCNT1L=0x00;
00010b bdec      	OUT  0x2C,R30
                 ; 0000 00B3 ICR1H=0x00;
00010c bde7      	OUT  0x27,R30
                 ; 0000 00B4 ICR1L=0x00;
00010d bde6      	OUT  0x26,R30
                 ; 0000 00B5 OCR1AH=0x00;
00010e bdeb      	OUT  0x2B,R30
                 ; 0000 00B6 OCR1AL=0x00;
00010f bdea      	OUT  0x2A,R30
                 ; 0000 00B7 OCR1BH=0x00;
000110 bde9      	OUT  0x29,R30
                 ; 0000 00B8 OCR1BL=0x00;
000111 bde8      	OUT  0x28,R30
                 ; 0000 00B9 
                 ; 0000 00BA // Timer/Counter 2 initialization
                 ; 0000 00BB // Clock source: System Clock
                 ; 0000 00BC // Clock value: Timer2 Stopped
                 ; 0000 00BD // Mode: Normal top=0xFF
                 ; 0000 00BE // OC2 output: Disconnected
                 ; 0000 00BF ASSR=0<<AS2;
000112 bde2      	OUT  0x22,R30
                 ; 0000 00C0 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000113 bde5      	OUT  0x25,R30
                 ; 0000 00C1 TCNT2=0x00;
000114 bde4      	OUT  0x24,R30
                 ; 0000 00C2 OCR2=0x00;
000115 bde3      	OUT  0x23,R30
                 ; 0000 00C3 
                 ; 0000 00C4 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00C5 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000116 bfe9      	OUT  0x39,R30
                 ; 0000 00C6 
                 ; 0000 00C7 // External Interrupt(s) initialization
                 ; 0000 00C8 // INT0: Off
                 ; 0000 00C9 // INT1: Off
                 ; 0000 00CA // INT2: Off
                 ; 0000 00CB MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000117 bfe5      	OUT  0x35,R30
                 ; 0000 00CC MCUCSR=(0<<ISC2);
000118 bfe4      	OUT  0x34,R30
                 ; 0000 00CD 
                 ; 0000 00CE // USART initialization
                 ; 0000 00CF // USART disabled
                 ; 0000 00D0 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000119 b9ea      	OUT  0xA,R30
                 ; 0000 00D1 
                 ; 0000 00D2 // Analog Comparator initialization
                 ; 0000 00D3 // Analog Comparator: Off
                 ; 0000 00D4 // The Analog Comparator's positive input is
                 ; 0000 00D5 // connected to the AIN0 pin
                 ; 0000 00D6 // The Analog Comparator's negative input is
                 ; 0000 00D7 // connected to the AIN1 pin
                 ; 0000 00D8 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00011a e8e0      	LDI  R30,LOW(128)
00011b b9e8      	OUT  0x8,R30
                 ; 0000 00D9 SFIOR=(0<<ACME);
00011c e0e0      	LDI  R30,LOW(0)
00011d bfe0      	OUT  0x30,R30
                 ; 0000 00DA 
                 ; 0000 00DB // ADC initialization
                 ; 0000 00DC // ADC disabled
                 ; 0000 00DD ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00011e b9e6      	OUT  0x6,R30
                 ; 0000 00DE 
                 ; 0000 00DF // SPI initialization
                 ; 0000 00E0 // SPI disabled
                 ; 0000 00E1 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00011f b9ed      	OUT  0xD,R30
                 ; 0000 00E2 
                 ; 0000 00E3 // TWI initialization
                 ; 0000 00E4 // TWI disabled
                 ; 0000 00E5 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000120 bfe6      	OUT  0x36,R30
                 ; 0000 00E6 
                 ; 0000 00E7 while (1)
                 _0x8:
                 ; 0000 00E8 {
                 ; 0000 00E9 modo = PINB&0x07;
000121 b3e6      	IN   R30,0x16
000122 70e7      	ANDI R30,LOW(0x7)
000123 2e5e      	MOV  R5,R30
                 ; 0000 00EA 
                 ; 0000 00EB // Place your code here
                 ; 0000 00EC switch (modo){
000124 e0f0      	LDI  R31,0
                 ; 0000 00ED case 0x00:
000125 9730      	SBIW R30,0
000126 f441      	BRNE _0xE
                 ; 0000 00EE filas = ~modoAct1[indice];
000127 2de6      	MOV  R30,R6
000128 e0f0      	LDI  R31,0
000129 52e0      	SUBI R30,LOW(-_modoAct1)
00012a 4fff      	SBCI R31,HIGH(-_modoAct1)
00012b 81e0      	LD   R30,Z
00012c 95e0      	COM  R30
00012d d06c      	RCALL SUBOPT_0x0
                 ; 0000 00EF delay_ms(100);
                 ; 0000 00F0 break;
00012e c043      	RJMP _0xD
                 ; 0000 00F1 
                 ; 0000 00F2 case 0x01:
                 _0xE:
00012f 30e1      	CPI  R30,LOW(0x1)
000130 e0a0      	LDI  R26,HIGH(0x1)
000131 07fa      	CPC  R31,R26
000132 f469      	BRNE _0xF
                 ; 0000 00F3 filas = ~modo2_3[renglon][indice];
000133 d06a      	RCALL SUBOPT_0x1
000134 2e7e      	MOV  R7,R30
                 ; 0000 00F4 repetir++;
000135 94b3      	INC  R11
                 ; 0000 00F5 if (repetir == 5){
000136 e0e5      	LDI  R30,LOW(5)
000137 15eb      	CP   R30,R11
000138 f411      	BRNE _0x10
                 ; 0000 00F6 renglon++;
000139 94a3      	INC  R10
                 ; 0000 00F7 repetir = 0;
00013a 24bb      	CLR  R11
                 ; 0000 00F8 }
                 ; 0000 00F9 
                 ; 0000 00FA if (renglon == 7) renglon = 0;
                 _0x10:
00013b e0e7      	LDI  R30,LOW(7)
00013c 15ea      	CP   R30,R10
00013d f409      	BRNE _0x11
00013e 24aa      	CLR  R10
                 ; 0000 00FB break;
                 _0x11:
00013f c032      	RJMP _0xD
                 ; 0000 00FC 
                 ; 0000 00FD case 0x02:
                 _0xF:
000140 30e2      	CPI  R30,LOW(0x2)
000141 e0a0      	LDI  R26,HIGH(0x2)
000142 07fa      	CPC  R31,R26
000143 f469      	BRNE _0x12
                 ; 0000 00FE filas = ~modo2_3[renglon][indice];
000144 d059      	RCALL SUBOPT_0x1
000145 d054      	RCALL SUBOPT_0x0
                 ; 0000 00FF delay_ms(100);
                 ; 0000 0100 repetir++;
000146 94b3      	INC  R11
                 ; 0000 0101 if (repetir == 5){
000147 e0e5      	LDI  R30,LOW(5)
000148 15eb      	CP   R30,R11
000149 f411      	BRNE _0x13
                 ; 0000 0102 renglon++;
00014a 94a3      	INC  R10
                 ; 0000 0103 repetir = 0;
00014b 24bb      	CLR  R11
                 ; 0000 0104 }
                 ; 0000 0105 
                 ; 0000 0106 if (renglon == 7) renglon = 0;
                 _0x13:
00014c e0e7      	LDI  R30,LOW(7)
00014d 15ea      	CP   R30,R10
00014e f409      	BRNE _0x14
00014f 24aa      	CLR  R10
                 ; 0000 0107 break;
                 _0x14:
000150 c021      	RJMP _0xD
                 ; 0000 0108 
                 ; 0000 0109 case 0x03:
                 _0x12:
000151 30e3      	CPI  R30,LOW(0x3)
000152 e0a0      	LDI  R26,HIGH(0x3)
000153 07fa      	CPC  R31,R26
000154 f479      	BRNE _0x18
                 ; 0000 010A filas = modoNumero[numero][indice];
000155 2de9      	MOV  R30,R9
000156 e0a5      	LDI  R26,LOW(5)
000157 9fea      	MUL  R30,R26
000158 01f0      	MOVW R30,R0
000159 5fe6      	SUBI R30,LOW(-_modoNumero)
00015a 4ffe      	SBCI R31,HIGH(-_modoNumero)
00015b d04f      	RCALL SUBOPT_0x2
                 ; 0000 010B repetir++;
                 ; 0000 010C if (repetir == 60){
00015c f411      	BRNE _0x16
                 ; 0000 010D repetir = 0;
00015d 24bb      	CLR  R11
                 ; 0000 010E numero++;
00015e 9493      	INC  R9
                 ; 0000 010F }
                 ; 0000 0110 
                 ; 0000 0111 if (numero == 10) {
                 _0x16:
00015f e0ea      	LDI  R30,LOW(10)
000160 15e9      	CP   R30,R9
000161 f409      	BRNE _0x17
                 ; 0000 0112 //puede_cambiar = 1;
                 ; 0000 0113 numero = 0;
000162 2499      	CLR  R9
                 ; 0000 0114 }
                 ; 0000 0115 break;
                 _0x17:
000163 c00e      	RJMP _0xD
                 ; 0000 0116 
                 ; 0000 0117 default:
                 _0x18:
                 ; 0000 0118 filas = modoNombre[letra][indice];
000164 2de8      	MOV  R30,R8
000165 e0a5      	LDI  R26,LOW(5)
000166 9fea      	MUL  R30,R26
000167 01f0      	MOVW R30,R0
000168 5ce4      	SUBI R30,LOW(-_modoNombre)
000169 4ffe      	SBCI R31,HIGH(-_modoNombre)
00016a d040      	RCALL SUBOPT_0x2
                 ; 0000 0119 repetir++;
                 ; 0000 011A if (repetir == 60){
00016b f411      	BRNE _0x19
                 ; 0000 011B repetir = 0;
00016c 24bb      	CLR  R11
                 ; 0000 011C letra++;
00016d 9483      	INC  R8
                 ; 0000 011D }
                 ; 0000 011E 
                 ; 0000 011F if (letra == 46) {
                 _0x19:
00016e e2ee      	LDI  R30,LOW(46)
00016f 15e8      	CP   R30,R8
000170 f409      	BRNE _0x1A
                 ; 0000 0120 letra = 0;
000171 2488      	CLR  R8
                 ; 0000 0121 }
                 ; 0000 0122 
                 ; 0000 0123 }
                 _0x1A:
                 _0xD:
                 ; 0000 0124 
                 ; 0000 0125 // Contador de anillo
                 ; 0000 0126 switch (columnas){
000172 2de4      	MOV  R30,R4
000173 e0f0      	LDI  R31,0
                 ; 0000 0127 case 0x01:
000174 30e1      	CPI  R30,LOW(0x1)
000175 e0a0      	LDI  R26,HIGH(0x1)
000176 07fa      	CPC  R31,R26
000177 f411      	BRNE _0x1E
                 ; 0000 0128 columnas = 0x02;
000178 e0e2      	LDI  R30,LOW(2)
000179 c013      	RJMP _0x25
                 ; 0000 0129 break;
                 ; 0000 012A 
                 ; 0000 012B case 0x02:
                 _0x1E:
00017a 30e2      	CPI  R30,LOW(0x2)
00017b e0a0      	LDI  R26,HIGH(0x2)
00017c 07fa      	CPC  R31,R26
00017d f411      	BRNE _0x1F
                 ; 0000 012C columnas = 0x04;
00017e e0e4      	LDI  R30,LOW(4)
00017f c00d      	RJMP _0x25
                 ; 0000 012D break;
                 ; 0000 012E 
                 ; 0000 012F case 0x04:
                 _0x1F:
000180 30e4      	CPI  R30,LOW(0x4)
000181 e0a0      	LDI  R26,HIGH(0x4)
000182 07fa      	CPC  R31,R26
000183 f411      	BRNE _0x20
                 ; 0000 0130 columnas = 0x08;
000184 e0e8      	LDI  R30,LOW(8)
000185 c007      	RJMP _0x25
                 ; 0000 0131 break;
                 ; 0000 0132 
                 ; 0000 0133 case 0x08:
                 _0x20:
000186 30e8      	CPI  R30,LOW(0x8)
000187 e0a0      	LDI  R26,HIGH(0x8)
000188 07fa      	CPC  R31,R26
000189 f411      	BRNE _0x22
                 ; 0000 0134 columnas = 0x10;
00018a e1e0      	LDI  R30,LOW(16)
00018b c001      	RJMP _0x25
                 ; 0000 0135 break;
                 ; 0000 0136 
                 ; 0000 0137 default:
                 _0x22:
                 ; 0000 0138 columnas = 0x01;
00018c e0e1      	LDI  R30,LOW(1)
                 _0x25:
00018d 2e4e      	MOV  R4,R30
                 ; 0000 0139 }
                 ; 0000 013A 
                 ; 0000 013B // Indice
                 ; 0000 013C indice++;
00018e 9463      	INC  R6
                 ; 0000 013D if (indice == 5) {
00018f e0e5      	LDI  R30,LOW(5)
000190 15e6      	CP   R30,R6
000191 f409      	BRNE _0x23
                 ; 0000 013E indice = 0;
000192 2466      	CLR  R6
                 ; 0000 013F }
                 ; 0000 0140 
                 ; 0000 0141 
                 ; 0000 0142 PORTC = columnas;
                 _0x23:
000193 ba45      	OUT  0x15,R4
                 ; 0000 0143 PORTD = filas;
000194 ba72      	OUT  0x12,R7
                 ; 0000 0144 delay_ms(10);
000195 e0aa      	LDI  R26,LOW(10)
000196 e0b0      	LDI  R27,0
000197 d01c      	RCALL _delay_ms
                 ; 0000 0145 }
000198 cf88      	RJMP _0x8
                 ; 0000 0146 }
                 _0x24:
000199 cfff      	RJMP _0x24
                 ; .FEND
                 
                 	.DSEG
                 _modoAct1:
0000e0           	.BYTE 0x7
                 _modo2_3:
0000e7           	.BYTE 0x23
                 _modoNumero:
00010a           	.BYTE 0x32
                 _modoNombre:
00013c           	.BYTE 0xE6
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00019a 2e7e      	MOV  R7,R30
00019b e6a4      	LDI  R26,LOW(100)
00019c e0b0      	LDI  R27,0
00019d c016      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
00019e 2dea      	MOV  R30,R10
00019f e0a5      	LDI  R26,LOW(5)
0001a0 9fea      	MUL  R30,R26
0001a1 01f0      	MOVW R30,R0
0001a2 51e9      	SUBI R30,LOW(-_modo2_3)
0001a3 4fff      	SBCI R31,HIGH(-_modo2_3)
0001a4 01df      	MOVW R26,R30
0001a5 27ee      	CLR  R30
0001a6 0da6      	ADD  R26,R6
0001a7 1fbe      	ADC  R27,R30
0001a8 91ec      	LD   R30,X
0001a9 95e0      	COM  R30
0001aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
0001ab 01df      	MOVW R26,R30
0001ac 27ee      	CLR  R30
0001ad 0da6      	ADD  R26,R6
0001ae 1fbe      	ADC  R27,R30
0001af 907c      	LD   R7,X
0001b0 94b3      	INC  R11
0001b1 e3ec      	LDI  R30,LOW(60)
0001b2 15eb      	CP   R30,R11
0001b3 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 _delay_ms:
0001b4 9610      	adiw r26,0
0001b5 f039      	breq __delay_ms1
                 __delay_ms0:
0001b6 95a8      	wdr
                +
0001b7 ef8a     +LDI R24 , LOW ( 0xFA )
0001b8 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0001b9 9701     +SBIW R24 , 1
0001ba f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0001bb 9711      	sbiw r26,1
0001bc f7c9      	brne __delay_ms0
                 __delay_ms1:
0001bd 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535 register use summary:
r0 :   7 r1 :   1 r2 :   0 r3 :   0 r4 :   3 r5 :   1 r6 :   6 r7 :   4 
r8 :   4 r9 :   4 r10:   7 r11:  10 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  31 r27:   6 r28:   1 r29:   1 r30: 116 r31:  17 
x  :   5 y  :   0 z  :   8 
Registers used: 21 out of 35 (60.0%)

ATmega8535 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :   1 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  22 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   0 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  13 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :   8 
cpc   :   7 cpi   :   7 cpse  :   0 dec   :   1 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :   8 ld    :   3 ldd   :   0 ldi   :  52 lds   :   0 lpm   :   7 
lsl   :   0 lsr   :   0 mov   :   9 movw  :   8 mul   :   3 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  42 
pop   :   0 push  :   0 rcall :   7 ret   :   3 reti  :   0 rjmp  :  34 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   4 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :   6 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   3 std   :   0 
sts   :   0 sub   :   0 subi  :   4 swap  :   0 tst   :   0 wdr   :   1 

Instructions used: 30 out of 114 (26.3%)

ATmega8535 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00037c    528    364    892    8192  10.9%
[.dseg] 0x000060 0x000222      0    322    322     512  62.9%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
